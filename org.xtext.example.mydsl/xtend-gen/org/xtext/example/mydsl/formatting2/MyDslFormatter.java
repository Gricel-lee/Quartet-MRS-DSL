/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.Condition;
import org.xtext.example.mydsl.myDsl.Location;
import org.xtext.example.mydsl.myDsl.Missions;
import org.xtext.example.mydsl.myDsl.ProblemSpecifications;
import org.xtext.example.mydsl.myDsl.Robots;
import org.xtext.example.mydsl.myDsl.TopMissions;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final ProblemSpecifications problemSpecifications, @Extension final IFormattableDocument document) {
    EList<Location> _location = problemSpecifications.getLocation();
    for (final Location location : _location) {
      document.<Location>format(location);
    }
    EList<Action> _action = problemSpecifications.getAction();
    for (final Action action : _action) {
      document.<Action>format(action);
    }
    EList<Robots> _robots = problemSpecifications.getRobots();
    for (final Robots robots : _robots) {
      document.<Robots>format(robots);
    }
    EList<Condition> _condition = problemSpecifications.getCondition();
    for (final Condition condition : _condition) {
      document.<Condition>format(condition);
    }
    EList<TopMissions> _topmissions = problemSpecifications.getTopmissions();
    for (final TopMissions topMissions : _topmissions) {
      document.<TopMissions>format(topMissions);
    }
  }
  
  protected void _format(final TopMissions topMissions, @Extension final IFormattableDocument document) {
    document.<Missions>format(topMissions.getMission());
  }
  
  public void format(final Object problemSpecifications, final IFormattableDocument document) {
    if (problemSpecifications instanceof XtextResource) {
      _format((XtextResource)problemSpecifications, document);
      return;
    } else if (problemSpecifications instanceof ProblemSpecifications) {
      _format((ProblemSpecifications)problemSpecifications, document);
      return;
    } else if (problemSpecifications instanceof TopMissions) {
      _format((TopMissions)problemSpecifications, document);
      return;
    } else if (problemSpecifications instanceof EObject) {
      _format((EObject)problemSpecifications, document);
      return;
    } else if (problemSpecifications == null) {
      _format((Void)null, document);
      return;
    } else if (problemSpecifications != null) {
      _format(problemSpecifications, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(problemSpecifications, document).toString());
    }
  }
}
