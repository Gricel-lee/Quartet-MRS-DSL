/**
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.PROBLEM_SPECIFICATIONS: return createProblemSpecifications();
      case MyDslPackage.CONDITION: return createCondition();
      case MyDslPackage.EVENT: return createEvent();
      case MyDslPackage.ACTION_END: return createActionEnd();
      case MyDslPackage.LOCATION_EVENT: return createLocationEvent();
      case MyDslPackage.LOCATION: return createLocation();
      case MyDslPackage.ACTION: return createAction();
      case MyDslPackage.ROBOTS: return createRobots();
      case MyDslPackage.TOP_MISSIONS: return createTopMissions();
      case MyDslPackage.MISSIONS: return createMissions();
      case MyDslPackage.MISSION_OPERATION: return createMissionOperation();
      case MyDslPackage.SHALL_MISSIONS: return createShallMissions();
      case MyDslPackage.COMPLEX_MISSIONS: return createComplexMissions();
      case MyDslPackage.NEGATION: return createNegation();
      case MyDslPackage.COMPOSITION: return createComposition();
      case MyDslPackage.SPECIFICATION_PATTERNS: return createSpecificationPatterns();
      case MyDslPackage.VISIT1: return createVisit1();
      case MyDslPackage.PATROL: return createPatrol();
      case MyDslPackage.AVOIDANCE_VISIT: return createAvoidanceVisit();
      case MyDslPackage.VISIT2: return createVisit2();
      case MyDslPackage.AVOID: return createAvoid();
      case MyDslPackage.REACT: return createReact();
      case MyDslPackage.COUNTERACT: return createCounteract();
      case MyDslPackage.WAIT: return createWait();
      case MyDslPackage.DELAYED: return createDelayed();
      case MyDslPackage.ELEMENTARY_PATTERNS: return createElementaryPatterns();
      case MyDslPackage.MAXIMIZE: return createMaximize();
      case MyDslPackage.AT_MOST: return createAtMost();
      case MyDslPackage.WITHIN: return createWithin();
      case MyDslPackage.COMPOSITE_PATTERNS: return createCompositePatterns();
      case MyDslPackage.CONSERVATION: return createConservation();
      case MyDslPackage.PRESERVATION: return createPreservation();
      case MyDslPackage.PAUSE: return createPause();
      case MyDslPackage.TIMEOUT: return createTimeout();
      case MyDslPackage.REPEAT: return createRepeat();
      case MyDslPackage.END: return createEnd();
      case MyDslPackage.PROPORTIONAL: return createProportional();
      case MyDslPackage.EXECUTE: return createExecute();
      case MyDslPackage.ACCRUE: return createAccrue();
      case MyDslPackage.RELIABILITY_CONFIDENCE: return createReliabilityConfidence();
      case MyDslPackage.EQUIDISTANCE: return createEquidistance();
      case MyDslPackage.TRAIL: return createTrail();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProblemSpecifications createProblemSpecifications()
  {
    ProblemSpecificationsImpl problemSpecifications = new ProblemSpecificationsImpl();
    return problemSpecifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionEnd createActionEnd()
  {
    ActionEndImpl actionEnd = new ActionEndImpl();
    return actionEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationEvent createLocationEvent()
  {
    LocationEventImpl locationEvent = new LocationEventImpl();
    return locationEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Location createLocation()
  {
    LocationImpl location = new LocationImpl();
    return location;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Robots createRobots()
  {
    RobotsImpl robots = new RobotsImpl();
    return robots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TopMissions createTopMissions()
  {
    TopMissionsImpl topMissions = new TopMissionsImpl();
    return topMissions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Missions createMissions()
  {
    MissionsImpl missions = new MissionsImpl();
    return missions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MissionOperation createMissionOperation()
  {
    MissionOperationImpl missionOperation = new MissionOperationImpl();
    return missionOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShallMissions createShallMissions()
  {
    ShallMissionsImpl shallMissions = new ShallMissionsImpl();
    return shallMissions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexMissions createComplexMissions()
  {
    ComplexMissionsImpl complexMissions = new ComplexMissionsImpl();
    return complexMissions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Negation createNegation()
  {
    NegationImpl negation = new NegationImpl();
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Composition createComposition()
  {
    CompositionImpl composition = new CompositionImpl();
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecificationPatterns createSpecificationPatterns()
  {
    SpecificationPatternsImpl specificationPatterns = new SpecificationPatternsImpl();
    return specificationPatterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Visit1 createVisit1()
  {
    Visit1Impl visit1 = new Visit1Impl();
    return visit1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Patrol createPatrol()
  {
    PatrolImpl patrol = new PatrolImpl();
    return patrol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AvoidanceVisit createAvoidanceVisit()
  {
    AvoidanceVisitImpl avoidanceVisit = new AvoidanceVisitImpl();
    return avoidanceVisit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Visit2 createVisit2()
  {
    Visit2Impl visit2 = new Visit2Impl();
    return visit2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Avoid createAvoid()
  {
    AvoidImpl avoid = new AvoidImpl();
    return avoid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public React createReact()
  {
    ReactImpl react = new ReactImpl();
    return react;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Counteract createCounteract()
  {
    CounteractImpl counteract = new CounteractImpl();
    return counteract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wait createWait()
  {
    WaitImpl wait = new WaitImpl();
    return wait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delayed createDelayed()
  {
    DelayedImpl delayed = new DelayedImpl();
    return delayed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementaryPatterns createElementaryPatterns()
  {
    ElementaryPatternsImpl elementaryPatterns = new ElementaryPatternsImpl();
    return elementaryPatterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Maximize createMaximize()
  {
    MaximizeImpl maximize = new MaximizeImpl();
    return maximize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtMost createAtMost()
  {
    AtMostImpl atMost = new AtMostImpl();
    return atMost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Within createWithin()
  {
    WithinImpl within = new WithinImpl();
    return within;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompositePatterns createCompositePatterns()
  {
    CompositePatternsImpl compositePatterns = new CompositePatternsImpl();
    return compositePatterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conservation createConservation()
  {
    ConservationImpl conservation = new ConservationImpl();
    return conservation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Preservation createPreservation()
  {
    PreservationImpl preservation = new PreservationImpl();
    return preservation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pause createPause()
  {
    PauseImpl pause = new PauseImpl();
    return pause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Timeout createTimeout()
  {
    TimeoutImpl timeout = new TimeoutImpl();
    return timeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Repeat createRepeat()
  {
    RepeatImpl repeat = new RepeatImpl();
    return repeat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public End createEnd()
  {
    EndImpl end = new EndImpl();
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proportional createProportional()
  {
    ProportionalImpl proportional = new ProportionalImpl();
    return proportional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Execute createExecute()
  {
    ExecuteImpl execute = new ExecuteImpl();
    return execute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Accrue createAccrue()
  {
    AccrueImpl accrue = new AccrueImpl();
    return accrue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReliabilityConfidence createReliabilityConfidence()
  {
    ReliabilityConfidenceImpl reliabilityConfidence = new ReliabilityConfidenceImpl();
    return reliabilityConfidence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equidistance createEquidistance()
  {
    EquidistanceImpl equidistance = new EquidistanceImpl();
    return equidistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trail createTrail()
  {
    TrailImpl trail = new TrailImpl();
    return trail;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
