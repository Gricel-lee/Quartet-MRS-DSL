/**
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Robots;
import org.xtext.example.mydsl.myDsl.ShallMissions;
import org.xtext.example.mydsl.myDsl.SpecificationPatterns;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Shall Missions</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ShallMissionsImpl#getRobots <em>Robots</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ShallMissionsImpl#getMovementPatterns <em>Movement Patterns</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ShallMissionsImpl extends MissionsImpl implements ShallMissions
{
  /**
   * The cached value of the '{@link #getRobots() <em>Robots</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRobots()
   * @generated
   * @ordered
   */
  protected Robots robots;

  /**
   * The cached value of the '{@link #getMovementPatterns() <em>Movement Patterns</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMovementPatterns()
   * @generated
   * @ordered
   */
  protected SpecificationPatterns movementPatterns;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ShallMissionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SHALL_MISSIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Robots getRobots()
  {
    if (robots != null && robots.eIsProxy())
    {
      InternalEObject oldRobots = (InternalEObject)robots;
      robots = (Robots)eResolveProxy(oldRobots);
      if (robots != oldRobots)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.SHALL_MISSIONS__ROBOTS, oldRobots, robots));
      }
    }
    return robots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Robots basicGetRobots()
  {
    return robots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRobots(Robots newRobots)
  {
    Robots oldRobots = robots;
    robots = newRobots;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHALL_MISSIONS__ROBOTS, oldRobots, robots));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecificationPatterns getMovementPatterns()
  {
    return movementPatterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMovementPatterns(SpecificationPatterns newMovementPatterns, NotificationChain msgs)
  {
    SpecificationPatterns oldMovementPatterns = movementPatterns;
    movementPatterns = newMovementPatterns;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS, oldMovementPatterns, newMovementPatterns);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMovementPatterns(SpecificationPatterns newMovementPatterns)
  {
    if (newMovementPatterns != movementPatterns)
    {
      NotificationChain msgs = null;
      if (movementPatterns != null)
        msgs = ((InternalEObject)movementPatterns).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS, null, msgs);
      if (newMovementPatterns != null)
        msgs = ((InternalEObject)newMovementPatterns).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS, null, msgs);
      msgs = basicSetMovementPatterns(newMovementPatterns, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS, newMovementPatterns, newMovementPatterns));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS:
        return basicSetMovementPatterns(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SHALL_MISSIONS__ROBOTS:
        if (resolve) return getRobots();
        return basicGetRobots();
      case MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS:
        return getMovementPatterns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SHALL_MISSIONS__ROBOTS:
        setRobots((Robots)newValue);
        return;
      case MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS:
        setMovementPatterns((SpecificationPatterns)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SHALL_MISSIONS__ROBOTS:
        setRobots((Robots)null);
        return;
      case MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS:
        setMovementPatterns((SpecificationPatterns)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SHALL_MISSIONS__ROBOTS:
        return robots != null;
      case MyDslPackage.SHALL_MISSIONS__MOVEMENT_PATTERNS:
        return movementPatterns != null;
    }
    return super.eIsSet(featureID);
  }

} //ShallMissionsImpl
