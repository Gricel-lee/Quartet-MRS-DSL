/**
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.Execute;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Robots;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Execute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExecuteImpl#getRobots <em>Robots</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExecuteImpl#getSetOfActions <em>Set Of Actions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExecuteImpl extends CompositePatternsImpl implements Execute
{
  /**
   * The cached value of the '{@link #getRobots() <em>Robots</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRobots()
   * @generated
   * @ordered
   */
  protected Robots robots;

  /**
   * The cached value of the '{@link #getSetOfActions() <em>Set Of Actions</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetOfActions()
   * @generated
   * @ordered
   */
  protected EList<Action> setOfActions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExecuteImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.EXECUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Robots getRobots()
  {
    if (robots != null && robots.eIsProxy())
    {
      InternalEObject oldRobots = (InternalEObject)robots;
      robots = (Robots)eResolveProxy(oldRobots);
      if (robots != oldRobots)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.EXECUTE__ROBOTS, oldRobots, robots));
      }
    }
    return robots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Robots basicGetRobots()
  {
    return robots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRobots(Robots newRobots)
  {
    Robots oldRobots = robots;
    robots = newRobots;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXECUTE__ROBOTS, oldRobots, robots));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Action> getSetOfActions()
  {
    if (setOfActions == null)
    {
      setOfActions = new EObjectResolvingEList<Action>(Action.class, this, MyDslPackage.EXECUTE__SET_OF_ACTIONS);
    }
    return setOfActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.EXECUTE__ROBOTS:
        if (resolve) return getRobots();
        return basicGetRobots();
      case MyDslPackage.EXECUTE__SET_OF_ACTIONS:
        return getSetOfActions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.EXECUTE__ROBOTS:
        setRobots((Robots)newValue);
        return;
      case MyDslPackage.EXECUTE__SET_OF_ACTIONS:
        getSetOfActions().clear();
        getSetOfActions().addAll((Collection<? extends Action>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXECUTE__ROBOTS:
        setRobots((Robots)null);
        return;
      case MyDslPackage.EXECUTE__SET_OF_ACTIONS:
        getSetOfActions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXECUTE__ROBOTS:
        return robots != null;
      case MyDslPackage.EXECUTE__SET_OF_ACTIONS:
        return setOfActions != null && !setOfActions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExecuteImpl
