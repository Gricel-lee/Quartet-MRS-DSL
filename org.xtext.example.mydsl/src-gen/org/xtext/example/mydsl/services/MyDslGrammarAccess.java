/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProblemSpecificationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ProblemSpecifications");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProblemSpecificationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProblemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSpecificationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLocationsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLocationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLocationLocationParserRuleCall_4_1_0 = (RuleCall)cLocationAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cLocationAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cLocationLocationParserRuleCall_4_2_1_0 = (RuleCall)cLocationAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cActionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_5_1_0 = (RuleCall)cActionAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cActionAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_5_2_1_0 = (RuleCall)cActionAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRobotsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRobotsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRobotsRobotsParserRuleCall_6_1_0 = (RuleCall)cRobotsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cRobotsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cRobotsRobotsParserRuleCall_6_2_1_0 = (RuleCall)cRobotsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cConditionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConditionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_7_1_0 = (RuleCall)cConditionAssignment_7_1.eContents().get(0);
		private final Assignment cConditionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_7_2_0 = (RuleCall)cConditionAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cMissionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTopmissionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTopmissionsTopMissionsParserRuleCall_8_1_0 = (RuleCall)cTopmissionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cTopmissionsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cTopmissionsTopMissionsParserRuleCall_8_2_1_0 = (RuleCall)cTopmissionsAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ProblemSpecifications returns ProblemSpecifications:
		//    {ProblemSpecifications}
		//    'problem' 'specifications'
		//    '{'
		//        ('locations:' location+=Location ( "," location+=Location)* )?
		//        ('actions:' action+=Action ( "," action+=Action)* )?
		//        ('robots:' robots+=Robots ( "," robots+=Robots)* )?
		//        ('conditions:' condition+=Condition (  condition+=Condition)* )?
		//        ('missions:'  topmissions+=TopMissions ( ";" topmissions+=TopMissions)* )?
		//        //('movement' 'patterns:'  specificationPatterns+=SpecificationPatterns ( "," specificationPatterns+=SpecificationPatterns)* )?
		//        //('elementary' 'patterns:' '{' elementaryPatterns+=ElementaryPatterns ( "," elementaryPatterns+=ElementaryPatterns)* '}' )?
		//        //('composite' 'patterns:' '{' compositePatterns+=CompositePatterns ( "," compositePatterns+=CompositePatterns)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProblemSpecifications}
		//'problem' 'specifications'
		//'{'
		//    ('locations:' location+=Location ( "," location+=Location)* )?
		//    ('actions:' action+=Action ( "," action+=Action)* )?
		//    ('robots:' robots+=Robots ( "," robots+=Robots)* )?
		//    ('conditions:' condition+=Condition (  condition+=Condition)* )?
		//    ('missions:'  topmissions+=TopMissions ( ";" topmissions+=TopMissions)* )?
		//    //('movement' 'patterns:'  specificationPatterns+=SpecificationPatterns ( "," specificationPatterns+=SpecificationPatterns)* )?
		//    //('elementary' 'patterns:' '{' elementaryPatterns+=ElementaryPatterns ( "," elementaryPatterns+=ElementaryPatterns)* '}' )?
		//    //('composite' 'patterns:' '{' compositePatterns+=CompositePatterns ( "," compositePatterns+=CompositePatterns)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ProblemSpecifications}
		public Action getProblemSpecificationsAction_0() { return cProblemSpecificationsAction_0; }
		
		//'problem'
		public Keyword getProblemKeyword_1() { return cProblemKeyword_1; }
		
		//'specifications'
		public Keyword getSpecificationsKeyword_2() { return cSpecificationsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('locations:' location+=Location ( "," location+=Location)* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'locations:'
		public Keyword getLocationsKeyword_4_0() { return cLocationsKeyword_4_0; }
		
		//location+=Location
		public Assignment getLocationAssignment_4_1() { return cLocationAssignment_4_1; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_4_1_0() { return cLocationLocationParserRuleCall_4_1_0; }
		
		//( "," location+=Location)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//location+=Location
		public Assignment getLocationAssignment_4_2_1() { return cLocationAssignment_4_2_1; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_4_2_1_0() { return cLocationLocationParserRuleCall_4_2_1_0; }
		
		//('actions:' action+=Action ( "," action+=Action)* )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'actions:'
		public Keyword getActionsKeyword_5_0() { return cActionsKeyword_5_0; }
		
		//action+=Action
		public Assignment getActionAssignment_5_1() { return cActionAssignment_5_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_5_1_0() { return cActionActionParserRuleCall_5_1_0; }
		
		//( "," action+=Action)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//action+=Action
		public Assignment getActionAssignment_5_2_1() { return cActionAssignment_5_2_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_5_2_1_0() { return cActionActionParserRuleCall_5_2_1_0; }
		
		//('robots:' robots+=Robots ( "," robots+=Robots)* )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'robots:'
		public Keyword getRobotsKeyword_6_0() { return cRobotsKeyword_6_0; }
		
		//robots+=Robots
		public Assignment getRobotsAssignment_6_1() { return cRobotsAssignment_6_1; }
		
		//Robots
		public RuleCall getRobotsRobotsParserRuleCall_6_1_0() { return cRobotsRobotsParserRuleCall_6_1_0; }
		
		//( "," robots+=Robots)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//robots+=Robots
		public Assignment getRobotsAssignment_6_2_1() { return cRobotsAssignment_6_2_1; }
		
		//Robots
		public RuleCall getRobotsRobotsParserRuleCall_6_2_1_0() { return cRobotsRobotsParserRuleCall_6_2_1_0; }
		
		//('conditions:' condition+=Condition (  condition+=Condition)* )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'conditions:'
		public Keyword getConditionsKeyword_7_0() { return cConditionsKeyword_7_0; }
		
		//condition+=Condition
		public Assignment getConditionAssignment_7_1() { return cConditionAssignment_7_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_1_0() { return cConditionConditionParserRuleCall_7_1_0; }
		
		//(  condition+=Condition)*
		public Assignment getConditionAssignment_7_2() { return cConditionAssignment_7_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_2_0() { return cConditionConditionParserRuleCall_7_2_0; }
		
		//('missions:'  topmissions+=TopMissions ( ";" topmissions+=TopMissions)* )?
		public Group getGroup_8() { return cGroup_8; }
		
		//'missions:'
		public Keyword getMissionsKeyword_8_0() { return cMissionsKeyword_8_0; }
		
		//topmissions+=TopMissions
		public Assignment getTopmissionsAssignment_8_1() { return cTopmissionsAssignment_8_1; }
		
		//TopMissions
		public RuleCall getTopmissionsTopMissionsParserRuleCall_8_1_0() { return cTopmissionsTopMissionsParserRuleCall_8_1_0; }
		
		//( ";" topmissions+=TopMissions)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//";"
		public Keyword getSemicolonKeyword_8_2_0() { return cSemicolonKeyword_8_2_0; }
		
		//topmissions+=TopMissions
		public Assignment getTopmissionsAssignment_8_2_1() { return cTopmissionsAssignment_8_2_1; }
		
		//TopMissions
		public RuleCall getTopmissionsTopMissionsParserRuleCall_8_2_1_0() { return cTopmissionsTopMissionsParserRuleCall_8_2_1_0; }
		
		//    //('movement' 'patterns:'  specificationPatterns+=SpecificationPatterns ( "," specificationPatterns+=SpecificationPatterns)* )?
		//    //('elementary' 'patterns:' '{' elementaryPatterns+=ElementaryPatterns ( "," elementaryPatterns+=ElementaryPatterns)* '}' )?
		//    //('composite' 'patterns:' '{' compositePatterns+=CompositePatterns ( "," compositePatterns+=CompositePatterns)* '}' )?
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocationEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Condition returns Condition:
		//     Event | ActionEnd | LocationEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//Event | ActionEnd | LocationEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Event
		public RuleCall getEventParserRuleCall_0() { return cEventParserRuleCall_0; }
		
		//ActionEnd
		public RuleCall getActionEndParserRuleCall_1() { return cActionEndParserRuleCall_1; }
		
		//LocationEvent
		public RuleCall getLocationEventParserRuleCall_2() { return cLocationEventParserRuleCall_2; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionEStringParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTrueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_6_1_0 = (RuleCall)cDescriptionAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Event returns Event:
		//    {Event}
		//    name=EString ':'
		//    condition=EString 'is' 'true' ('('description=EString ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event}
		//name=EString ':'
		//condition=EString 'is' 'true' ('('description=EString ')')?
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//condition=EString
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_3_0() { return cConditionEStringParserRuleCall_3_0; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//'true'
		public Keyword getTrueKeyword_5() { return cTrueKeyword_5; }
		
		//('('description=EString ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_6_1() { return cDescriptionAssignment_6_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_6_1_0() { return cDescriptionEStringParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class ActionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ActionEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActionActionCrossReference_3_0 = (CrossReference)cActionAssignment_3.eContents().get(0);
		private final RuleCall cActionActionEStringParserRuleCall_3_0_1 = (RuleCall)cActionActionCrossReference_3_0.eContents().get(1);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEndedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_6_1_0 = (RuleCall)cDescriptionAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ActionEnd returns ActionEnd:
		//    {ActionEnd}
		//    name=EString ':'
		//    action=[Action|EString] 'is' 'ended' ('('description=EString ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ActionEnd}
		//name=EString ':'
		//action=[Action|EString] 'is' 'ended' ('('description=EString ')')?
		public Group getGroup() { return cGroup; }
		
		//{ActionEnd}
		public Action getActionEndAction_0() { return cActionEndAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//action=[Action|EString]
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//[Action|EString]
		public CrossReference getActionActionCrossReference_3_0() { return cActionActionCrossReference_3_0; }
		
		//EString
		public RuleCall getActionActionEStringParserRuleCall_3_0_1() { return cActionActionEStringParserRuleCall_3_0_1; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//'ended'
		public Keyword getEndedKeyword_5() { return cEndedKeyword_5; }
		
		//('('description=EString ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_6_1() { return cDescriptionAssignment_6_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_6_1_0() { return cDescriptionEStringParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class LocationEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LocationEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocationEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRobotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRobotsRobotsCrossReference_3_0 = (CrossReference)cRobotsAssignment_3.eContents().get(0);
		private final RuleCall cRobotsRobotsEStringParserRuleCall_3_0_1 = (RuleCall)cRobotsRobotsCrossReference_3_0.eContents().get(1);
		private final Keyword cAtLocKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cLocationLocationCrossReference_5_0 = (CrossReference)cLocationAssignment_5.eContents().get(0);
		private final RuleCall cLocationLocationEStringParserRuleCall_5_0_1 = (RuleCall)cLocationLocationCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_6_1_0 = (RuleCall)cDescriptionAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//LocationEvent returns LocationEvent:
		//    {LocationEvent}
		//    name=EString ':'
		//    robots=[Robots|EString] 'at loc' location=[Location|EString]  ('('description=EString ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{LocationEvent}
		//name=EString ':'
		//robots=[Robots|EString] 'at loc' location=[Location|EString]  ('('description=EString ')')?
		public Group getGroup() { return cGroup; }
		
		//{LocationEvent}
		public Action getLocationEventAction_0() { return cLocationEventAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//robots=[Robots|EString]
		public Assignment getRobotsAssignment_3() { return cRobotsAssignment_3; }
		
		//[Robots|EString]
		public CrossReference getRobotsRobotsCrossReference_3_0() { return cRobotsRobotsCrossReference_3_0; }
		
		//EString
		public RuleCall getRobotsRobotsEStringParserRuleCall_3_0_1() { return cRobotsRobotsEStringParserRuleCall_3_0_1; }
		
		//'at loc'
		public Keyword getAtLocKeyword_4() { return cAtLocKeyword_4; }
		
		//location=[Location|EString]
		public Assignment getLocationAssignment_5() { return cLocationAssignment_5; }
		
		//[Location|EString]
		public CrossReference getLocationLocationCrossReference_5_0() { return cLocationLocationCrossReference_5_0; }
		
		//EString
		public RuleCall getLocationLocationEStringParserRuleCall_5_0_1() { return cLocationLocationEStringParserRuleCall_5_0_1; }
		
		//('('description=EString ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_6_1() { return cDescriptionAssignment_6_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_6_1_0() { return cDescriptionEStringParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Location returns Location:
		//    {Location}
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Location}
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Location}
		public Action getLocationAction_0() { return cLocationAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Action returns Action:
		//    {Action}
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Action}
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class RobotsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Robots");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Robots returns Robots:
		//    {Robots}
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Robots}
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Robots}
		public Action getRobotsAction_0() { return cRobotsAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TopMissionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TopMissions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMissionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMissionMissionsParserRuleCall_2_0 = (RuleCall)cMissionAssignment_2.eContents().get(0);
		
		///* Missions and mission composition */
		//TopMissions returns TopMissions:
		//    name=EString  ':'
		//    mission=Missions
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString  ':'
		//mission=Missions
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//mission=Missions
		public Assignment getMissionAssignment_2() { return cMissionAssignment_2; }
		
		//Missions
		public RuleCall getMissionMissionsParserRuleCall_2_0() { return cMissionMissionsParserRuleCall_2_0; }
	}
	public class MissionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Missions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShallMissionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexMissionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementaryPatternsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompositePatternsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Missions returns Missions:
		//    ShallMissions | ComplexMissions | ElementaryPatterns | CompositePatterns;
		@Override public ParserRule getRule() { return rule; }
		
		//ShallMissions | ComplexMissions | ElementaryPatterns | CompositePatterns
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ShallMissions
		public RuleCall getShallMissionsParserRuleCall_0() { return cShallMissionsParserRuleCall_0; }
		
		//ComplexMissions
		public RuleCall getComplexMissionsParserRuleCall_1() { return cComplexMissionsParserRuleCall_1; }
		
		//ElementaryPatterns
		public RuleCall getElementaryPatternsParserRuleCall_2() { return cElementaryPatternsParserRuleCall_2; }
		
		//CompositePatterns
		public RuleCall getCompositePatternsParserRuleCall_3() { return cCompositePatternsParserRuleCall_3; }
	}
	public class Mission_no_prob_rewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Mission_no_prob_rew");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShallMissionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexMissionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeoutParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRepeatParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExecuteParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////Missions that do not contain any probabilities or rewards
		////This avoids nested probabilistic and reward operators
		//Mission_no_prob_rew returns Missions:
		//    ShallMissions |
		//    ComplexMissions |
		//    //CompositePatterns
		//    Pause |
		//    Timeout |
		//    Repeat |
		//    End |
		//    Execute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ShallMissions |
		//ComplexMissions |
		////CompositePatterns
		//Pause |
		//Timeout |
		//Repeat |
		//End |
		//Execute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ShallMissions
		public RuleCall getShallMissionsParserRuleCall_0() { return cShallMissionsParserRuleCall_0; }
		
		//ComplexMissions
		public RuleCall getComplexMissionsParserRuleCall_1() { return cComplexMissionsParserRuleCall_1; }
		
		////CompositePatterns
		//Pause
		public RuleCall getPauseParserRuleCall_2() { return cPauseParserRuleCall_2; }
		
		//Timeout
		public RuleCall getTimeoutParserRuleCall_3() { return cTimeoutParserRuleCall_3; }
		
		//Repeat
		public RuleCall getRepeatParserRuleCall_4() { return cRepeatParserRuleCall_4; }
		
		//End
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
		
		//Execute
		public RuleCall getExecuteParserRuleCall_6() { return cExecuteParserRuleCall_6; }
	}
	public class MissionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MissionOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MissionOperation returns MissionOperation:
		//    Negation | Composition;
		@Override public ParserRule getRule() { return rule; }
		
		//Negation | Composition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }
		
		//Composition
		public RuleCall getCompositionParserRuleCall_1() { return cCompositionParserRuleCall_1; }
	}
	public class ShallMissionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ShallMissions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShallMissionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRobotsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRobotsRobotsCrossReference_1_0 = (CrossReference)cRobotsAssignment_1.eContents().get(0);
		private final RuleCall cRobotsRobotsEStringParserRuleCall_1_0_1 = (RuleCall)cRobotsRobotsCrossReference_1_0.eContents().get(1);
		private final Keyword cShallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMovementPatternsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMovementPatternsSpecificationPatternsParserRuleCall_3_0 = (RuleCall)cMovementPatternsAssignment_3.eContents().get(0);
		
		//ShallMissions returns ShallMissions:
		//    {ShallMissions}
		//    robots=[Robots|EString] 'shall'
		//        movementPatterns=SpecificationPatterns//--add in the future ( "," movementPatterns+=SpecificationPatterns)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShallMissions}
		//robots=[Robots|EString] 'shall'
		//    movementPatterns=SpecificationPatterns
		public Group getGroup() { return cGroup; }
		
		//{ShallMissions}
		public Action getShallMissionsAction_0() { return cShallMissionsAction_0; }
		
		//robots=[Robots|EString]
		public Assignment getRobotsAssignment_1() { return cRobotsAssignment_1; }
		
		//[Robots|EString]
		public CrossReference getRobotsRobotsCrossReference_1_0() { return cRobotsRobotsCrossReference_1_0; }
		
		//EString
		public RuleCall getRobotsRobotsEStringParserRuleCall_1_0_1() { return cRobotsRobotsEStringParserRuleCall_1_0_1; }
		
		//'shall'
		public Keyword getShallKeyword_2() { return cShallKeyword_2; }
		
		//movementPatterns=SpecificationPatterns
		public Assignment getMovementPatternsAssignment_3() { return cMovementPatternsAssignment_3; }
		
		//SpecificationPatterns
		public RuleCall getMovementPatternsSpecificationPatternsParserRuleCall_3_0() { return cMovementPatternsSpecificationPatternsParserRuleCall_3_0; }
	}
	public class ComplexMissionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComplexMissions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComplexMissionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCompositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompositionMissionOperationParserRuleCall_1_0 = (RuleCall)cCompositionAssignment_1.eContents().get(0);
		
		//ComplexMissions returns ComplexMissions:
		//    {ComplexMissions}
		//    //'complex' 'mission'
		//    composition=MissionOperation//--should work without this ( "," composition+=MissionOperation)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComplexMissions}
		////'complex' 'mission'
		//composition=MissionOperation
		public Group getGroup() { return cGroup; }
		
		//{ComplexMissions}
		public Action getComplexMissionsAction_0() { return cComplexMissionsAction_0; }
		
		////'complex' 'mission'
		//composition=MissionOperation
		public Assignment getCompositionAssignment_1() { return cCompositionAssignment_1; }
		
		//MissionOperation
		public RuleCall getCompositionMissionOperationParserRuleCall_1_0() { return cCompositionMissionOperationParserRuleCall_1_0; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNegationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotMissionsParserRuleCall_3_0 = (RuleCall)cNotAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Negation returns Negation:
		//    {Negation}
		//    'not' '(' not=Missions ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Negation}
		//'not' '(' not=Missions ')'
		public Group getGroup() { return cGroup; }
		
		//{Negation}
		public Action getNegationAction_0() { return cNegationAction_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//not=Missions
		public Assignment getNotAssignment_3() { return cNotAssignment_3; }
		
		//Missions
		public RuleCall getNotMissionsParserRuleCall_3_0() { return cNotMissionsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMiss1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMiss1MissionsParserRuleCall_2_0 = (RuleCall)cMiss1Assignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBinaryTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cBinaryTypeAlternatives_4_0 = (Alternatives)cBinaryTypeAssignment_4.eContents().get(0);
		private final Keyword cBinaryTypeAndKeyword_4_0_0 = (Keyword)cBinaryTypeAlternatives_4_0.eContents().get(0);
		private final Keyword cBinaryTypeOrKeyword_4_0_1 = (Keyword)cBinaryTypeAlternatives_4_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMiss2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMiss2MissionsParserRuleCall_6_0 = (RuleCall)cMiss2Assignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Composition returns Composition:
		//    {Composition}
		//    '(' miss1=Missions ')' binaryType=('and'|'or') '(' miss2=Missions ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Composition}
		//'(' miss1=Missions ')' binaryType=('and'|'or') '(' miss2=Missions ')'
		public Group getGroup() { return cGroup; }
		
		//{Composition}
		public Action getCompositionAction_0() { return cCompositionAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//miss1=Missions
		public Assignment getMiss1Assignment_2() { return cMiss1Assignment_2; }
		
		//Missions
		public RuleCall getMiss1MissionsParserRuleCall_2_0() { return cMiss1MissionsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//binaryType=('and'|'or')
		public Assignment getBinaryTypeAssignment_4() { return cBinaryTypeAssignment_4; }
		
		//('and'|'or')
		public Alternatives getBinaryTypeAlternatives_4_0() { return cBinaryTypeAlternatives_4_0; }
		
		//'and'
		public Keyword getBinaryTypeAndKeyword_4_0_0() { return cBinaryTypeAndKeyword_4_0_0; }
		
		//'or'
		public Keyword getBinaryTypeOrKeyword_4_0_1() { return cBinaryTypeOrKeyword_4_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//miss2=Missions
		public Assignment getMiss2Assignment_6() { return cMiss2Assignment_6; }
		
		//Missions
		public RuleCall getMiss2MissionsParserRuleCall_6_0() { return cMiss2MissionsParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SpecificationPatternsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SpecificationPatterns");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisit1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatrolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAvoidanceVisitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReactParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCounteractParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWaitParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// ( binaryType=CompositionOperator missions+=Missions )* ;
		//    // cannot add more "binaryType" as it is only returned/written once (the last one to appear)
		///* Specification patterns */
		//SpecificationPatterns returns SpecificationPatterns:
		//    Visit1 | Patrol | AvoidanceVisit |React | Counteract | Wait;
		@Override public ParserRule getRule() { return rule; }
		
		//Visit1 | Patrol | AvoidanceVisit |React | Counteract | Wait
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Visit1
		public RuleCall getVisit1ParserRuleCall_0() { return cVisit1ParserRuleCall_0; }
		
		//Patrol
		public RuleCall getPatrolParserRuleCall_1() { return cPatrolParserRuleCall_1; }
		
		//AvoidanceVisit
		public RuleCall getAvoidanceVisitParserRuleCall_2() { return cAvoidanceVisitParserRuleCall_2; }
		
		//React
		public RuleCall getReactParserRuleCall_3() { return cReactParserRuleCall_3; }
		
		//Counteract
		public RuleCall getCounteractParserRuleCall_4() { return cCounteractParserRuleCall_4; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_5() { return cWaitParserRuleCall_5; }
	}
	public class Visit1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Visit1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVisit1Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVisitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeInSequenceKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeInOrderKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypeInStrictOrderKeyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		private final Keyword cTypeFairlyKeyword_2_0_3 = (Keyword)cTypeAlternatives_2_0.eContents().get(3);
		private final Assignment cLocationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLocationsLocationCrossReference_3_0 = (CrossReference)cLocationsAssignment_3.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_3_0_1 = (RuleCall)cLocationsLocationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLocationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cLocationsLocationCrossReference_4_1_0 = (CrossReference)cLocationsAssignment_4_1.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_4_1_0_1 = (RuleCall)cLocationsLocationCrossReference_4_1_0.eContents().get(1);
		
		////Coverage and Patrol
		//Visit1 returns Visit1: //this was changed to add 'visit loc' (without any string in the middle)
		//    {Visit1}
		//    'visit' type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?  locations+=[Location|EString] ("," locations+=[Location|EString])* ;
		@Override public ParserRule getRule() { return rule; }
		
		////this was changed to add 'visit loc' (without any string in the middle)
		//   {Visit1}
		//   'visit' type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?  locations+=[Location|EString] ("," locations+=[Location|EString])*
		public Group getGroup() { return cGroup; }
		
		////this was changed to add 'visit loc' (without any string in the middle)
		//   {Visit1}
		public Action getVisit1Action_0() { return cVisit1Action_0; }
		
		//'visit'
		public Keyword getVisitKeyword_1() { return cVisitKeyword_1; }
		
		//type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('in sequence' | 'in order' | 'in strict order' | 'fairly')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'in sequence'
		public Keyword getTypeInSequenceKeyword_2_0_0() { return cTypeInSequenceKeyword_2_0_0; }
		
		//'in order'
		public Keyword getTypeInOrderKeyword_2_0_1() { return cTypeInOrderKeyword_2_0_1; }
		
		//'in strict order'
		public Keyword getTypeInStrictOrderKeyword_2_0_2() { return cTypeInStrictOrderKeyword_2_0_2; }
		
		//'fairly'
		public Keyword getTypeFairlyKeyword_2_0_3() { return cTypeFairlyKeyword_2_0_3; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_3() { return cLocationsAssignment_3; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_3_0() { return cLocationsLocationCrossReference_3_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_3_0_1() { return cLocationsLocationEStringParserRuleCall_3_0_1; }
		
		//("," locations+=[Location|EString])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_4_1() { return cLocationsAssignment_4_1; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_4_1_0() { return cLocationsLocationCrossReference_4_1_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_4_1_0_1() { return cLocationsLocationEStringParserRuleCall_4_1_0_1; }
	}
	public class PatrolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Patrol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatrolAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPatrolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeInSequenceKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeInOrderKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypeInStrictOrderKeyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		private final Keyword cTypeFairlyKeyword_2_0_3 = (Keyword)cTypeAlternatives_2_0.eContents().get(3);
		private final Assignment cLocationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLocationsLocationCrossReference_3_0 = (CrossReference)cLocationsAssignment_3.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_3_0_1 = (RuleCall)cLocationsLocationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLocationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cLocationsLocationCrossReference_4_1_0 = (CrossReference)cLocationsAssignment_4_1.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_4_1_0_1 = (RuleCall)cLocationsLocationCrossReference_4_1_0.eContents().get(1);
		
		//Patrol returns Patrol:
		//    {Patrol}
		//    'patrol' type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?  locations+=[Location|EString] ("," locations+=[Location|EString])* ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Patrol}
		//'patrol' type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?  locations+=[Location|EString] ("," locations+=[Location|EString])*
		public Group getGroup() { return cGroup; }
		
		//{Patrol}
		public Action getPatrolAction_0() { return cPatrolAction_0; }
		
		//'patrol'
		public Keyword getPatrolKeyword_1() { return cPatrolKeyword_1; }
		
		//type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('in sequence' | 'in order' | 'in strict order' | 'fairly')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'in sequence'
		public Keyword getTypeInSequenceKeyword_2_0_0() { return cTypeInSequenceKeyword_2_0_0; }
		
		//'in order'
		public Keyword getTypeInOrderKeyword_2_0_1() { return cTypeInOrderKeyword_2_0_1; }
		
		//'in strict order'
		public Keyword getTypeInStrictOrderKeyword_2_0_2() { return cTypeInStrictOrderKeyword_2_0_2; }
		
		//'fairly'
		public Keyword getTypeFairlyKeyword_2_0_3() { return cTypeFairlyKeyword_2_0_3; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_3() { return cLocationsAssignment_3; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_3_0() { return cLocationsLocationCrossReference_3_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_3_0_1() { return cLocationsLocationEStringParserRuleCall_3_0_1; }
		
		//("," locations+=[Location|EString])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_4_1() { return cLocationsAssignment_4_1; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_4_1_0() { return cLocationsLocationCrossReference_4_1_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_4_1_0_1() { return cLocationsLocationEStringParserRuleCall_4_1_0_1; }
	}
	public class AvoidanceVisitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AvoidanceVisit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisit2ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAvoidParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Avoidance
		//AvoidanceVisit returns AvoidanceVisit:
		//    Visit2 | Avoid;
		@Override public ParserRule getRule() { return rule; }
		
		//Visit2 | Avoid
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Visit2
		public RuleCall getVisit2ParserRuleCall_0() { return cVisit2ParserRuleCall_0; }
		
		//Avoid
		public RuleCall getAvoidParserRuleCall_1() { return cAvoidParserRuleCall_1; }
	}
	public class Visit2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Visit2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVisit2Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVisitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeMoreThanKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeLessThanKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypeExactlyKeyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		private final Assignment cNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberEIntParserRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		private final Keyword cTimesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cLocationsLocationCrossReference_5_0 = (CrossReference)cLocationsAssignment_5.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_5_0_1 = (RuleCall)cLocationsLocationCrossReference_5_0.eContents().get(1);
		
		//Visit2 returns Visit2:
		//    {Visit2}
		//    'visit' type =('more than' | 'less than' | 'exactly') number=EInt 'times' locations+=[Location|EString] ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Visit2}
		//'visit' type =('more than' | 'less than' | 'exactly') number=EInt 'times' locations+=[Location|EString]
		public Group getGroup() { return cGroup; }
		
		//{Visit2}
		public Action getVisit2Action_0() { return cVisit2Action_0; }
		
		//'visit'
		public Keyword getVisitKeyword_1() { return cVisitKeyword_1; }
		
		//type =('more than' | 'less than' | 'exactly')
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('more than' | 'less than' | 'exactly')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'more than'
		public Keyword getTypeMoreThanKeyword_2_0_0() { return cTypeMoreThanKeyword_2_0_0; }
		
		//'less than'
		public Keyword getTypeLessThanKeyword_2_0_1() { return cTypeLessThanKeyword_2_0_1; }
		
		//'exactly'
		public Keyword getTypeExactlyKeyword_2_0_2() { return cTypeExactlyKeyword_2_0_2; }
		
		//number=EInt
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }
		
		//EInt
		public RuleCall getNumberEIntParserRuleCall_3_0() { return cNumberEIntParserRuleCall_3_0; }
		
		//'times'
		public Keyword getTimesKeyword_4() { return cTimesKeyword_4; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_5() { return cLocationsAssignment_5; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_5_0() { return cLocationsLocationCrossReference_5_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_5_0_1() { return cLocationsLocationEStringParserRuleCall_5_0_1; }
	}
	public class AvoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Avoid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAvoidAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAvoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLocationsLocationCrossReference_2_0 = (CrossReference)cLocationsAssignment_2.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_2_0_1 = (RuleCall)cLocationsLocationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLocationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cLocationsLocationCrossReference_3_1_0 = (CrossReference)cLocationsAssignment_3_1.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_3_1_0_1 = (RuleCall)cLocationsLocationCrossReference_3_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cTypeAlternatives_4_0 = (Alternatives)cTypeAssignment_4.eContents().get(0);
		private final Keyword cTypeUntilKeyword_4_0_0 = (Keyword)cTypeAlternatives_4_0.eContents().get(0);
		private final Keyword cTypeAfterKeyword_4_0_1 = (Keyword)cTypeAlternatives_4_0.eContents().get(1);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cConditionConditionCrossReference_5_0 = (CrossReference)cConditionAssignment_5.eContents().get(0);
		private final RuleCall cConditionConditionEStringParserRuleCall_5_0_1 = (RuleCall)cConditionConditionCrossReference_5_0.eContents().get(1);
		
		//Avoid returns Avoid:
		//    {Avoid}
		//    'avoid' locations+=[Location|EString] ("," locations+=[Location|EString])*  type=('until'|'after')? (condition=[Condition|EString])?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Avoid}
		//'avoid' locations+=[Location|EString] ("," locations+=[Location|EString])*  type=('until'|'after')? (condition=[Condition|EString])?
		public Group getGroup() { return cGroup; }
		
		//{Avoid}
		public Action getAvoidAction_0() { return cAvoidAction_0; }
		
		//'avoid'
		public Keyword getAvoidKeyword_1() { return cAvoidKeyword_1; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_2() { return cLocationsAssignment_2; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_2_0() { return cLocationsLocationCrossReference_2_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_2_0_1() { return cLocationsLocationEStringParserRuleCall_2_0_1; }
		
		//("," locations+=[Location|EString])*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_3_1() { return cLocationsAssignment_3_1; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_3_1_0() { return cLocationsLocationCrossReference_3_1_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_3_1_0_1() { return cLocationsLocationEStringParserRuleCall_3_1_0_1; }
		
		//type=('until'|'after')?
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//('until'|'after')
		public Alternatives getTypeAlternatives_4_0() { return cTypeAlternatives_4_0; }
		
		//'until'
		public Keyword getTypeUntilKeyword_4_0_0() { return cTypeUntilKeyword_4_0_0; }
		
		//'after'
		public Keyword getTypeAfterKeyword_4_0_1() { return cTypeAfterKeyword_4_0_1; }
		
		//(condition=[Condition|EString])?
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//[Condition|EString]
		public CrossReference getConditionConditionCrossReference_5_0() { return cConditionConditionCrossReference_5_0; }
		
		//EString
		public RuleCall getConditionConditionEStringParserRuleCall_5_0_1() { return cConditionConditionEStringParserRuleCall_5_0_1; }
	}
	public class ReactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.React");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReactKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeInstantlyKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeWithADelayKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypePromptlyKeyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cConditionConditionCrossReference_4_0 = (CrossReference)cConditionAssignment_4.eContents().get(0);
		private final RuleCall cConditionConditionEStringParserRuleCall_4_0_1 = (RuleCall)cConditionConditionCrossReference_4_0.eContents().get(1);
		private final Keyword cByKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cExecKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cActionAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final CrossReference cActionActionCrossReference_6_0_1_0 = (CrossReference)cActionAssignment_6_0_1.eContents().get(0);
		private final RuleCall cActionActionEStringParserRuleCall_6_0_1_0_1 = (RuleCall)cActionActionCrossReference_6_0_1_0.eContents().get(1);
		private final Assignment cPatternAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cPatternSpecificationPatternsParserRuleCall_6_1_0 = (RuleCall)cPatternAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cAlternatives_6.eContents().get(2);
		private final Keyword cReachKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cLocationsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cLocationsLocationCrossReference_6_2_1_0 = (CrossReference)cLocationsAssignment_6_2_1.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_6_2_1_0_1 = (RuleCall)cLocationsLocationCrossReference_6_2_1_0.eContents().get(1);
		
		//React returns React:
		//    {React}
		//    'react'
		//    type = ('instantly'|'with a delay'| 'promptly')
		//    'to' condition=[Condition|EString] 'by'
		//    ('exec' action=[Action|EString] | pattern=SpecificationPatterns | 'reach' locations+=[Location|EString]);
		@Override public ParserRule getRule() { return rule; }
		
		//{React}
		//'react'
		//type = ('instantly'|'with a delay'| 'promptly')
		//'to' condition=[Condition|EString] 'by'
		//('exec' action=[Action|EString] | pattern=SpecificationPatterns | 'reach' locations+=[Location|EString])
		public Group getGroup() { return cGroup; }
		
		//{React}
		public Action getReactAction_0() { return cReactAction_0; }
		
		//'react'
		public Keyword getReactKeyword_1() { return cReactKeyword_1; }
		
		//type = ('instantly'|'with a delay'| 'promptly')
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('instantly'|'with a delay'| 'promptly')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'instantly'
		public Keyword getTypeInstantlyKeyword_2_0_0() { return cTypeInstantlyKeyword_2_0_0; }
		
		//'with a delay'
		public Keyword getTypeWithADelayKeyword_2_0_1() { return cTypeWithADelayKeyword_2_0_1; }
		
		//'promptly'
		public Keyword getTypePromptlyKeyword_2_0_2() { return cTypePromptlyKeyword_2_0_2; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//condition=[Condition|EString]
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//[Condition|EString]
		public CrossReference getConditionConditionCrossReference_4_0() { return cConditionConditionCrossReference_4_0; }
		
		//EString
		public RuleCall getConditionConditionEStringParserRuleCall_4_0_1() { return cConditionConditionEStringParserRuleCall_4_0_1; }
		
		//'by'
		public Keyword getByKeyword_5() { return cByKeyword_5; }
		
		//('exec' action=[Action|EString] | pattern=SpecificationPatterns | 'reach' locations+=[Location|EString])
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'exec' action=[Action|EString]
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'exec'
		public Keyword getExecKeyword_6_0_0() { return cExecKeyword_6_0_0; }
		
		//action=[Action|EString]
		public Assignment getActionAssignment_6_0_1() { return cActionAssignment_6_0_1; }
		
		//[Action|EString]
		public CrossReference getActionActionCrossReference_6_0_1_0() { return cActionActionCrossReference_6_0_1_0; }
		
		//EString
		public RuleCall getActionActionEStringParserRuleCall_6_0_1_0_1() { return cActionActionEStringParserRuleCall_6_0_1_0_1; }
		
		//pattern=SpecificationPatterns
		public Assignment getPatternAssignment_6_1() { return cPatternAssignment_6_1; }
		
		//SpecificationPatterns
		public RuleCall getPatternSpecificationPatternsParserRuleCall_6_1_0() { return cPatternSpecificationPatternsParserRuleCall_6_1_0; }
		
		//'reach' locations+=[Location|EString]
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//'reach'
		public Keyword getReachKeyword_6_2_0() { return cReachKeyword_6_2_0; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_6_2_1() { return cLocationsAssignment_6_2_1; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_6_2_1_0() { return cLocationsLocationCrossReference_6_2_1_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_6_2_1_0_1() { return cLocationsLocationEStringParserRuleCall_6_2_1_0_1; }
	}
	public class CounteractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Counteract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCounteractAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCounteractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeInstantlyKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeWithADelayKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cReachKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cLocationsLocationCrossReference_5_0 = (CrossReference)cLocationsAssignment_5.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_5_0_1 = (RuleCall)cLocationsLocationCrossReference_5_0.eContents().get(1);
		private final Keyword cByKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cConditionConditionCrossReference_7_0 = (CrossReference)cConditionAssignment_7.eContents().get(0);
		private final RuleCall cConditionConditionEStringParserRuleCall_7_0_1 = (RuleCall)cConditionConditionCrossReference_7_0.eContents().get(1);
		
		//Counteract returns Counteract:
		//    {Counteract}
		//    'counteract'
		//    type = ('instantly'|'with a delay') 'when' 'reach' locations=[Location|EString]
		//    'by' (condition=[Condition|EString])
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Counteract}
		//'counteract'
		//type = ('instantly'|'with a delay') 'when' 'reach' locations=[Location|EString]
		//'by' (condition=[Condition|EString])
		public Group getGroup() { return cGroup; }
		
		//{Counteract}
		public Action getCounteractAction_0() { return cCounteractAction_0; }
		
		//'counteract'
		public Keyword getCounteractKeyword_1() { return cCounteractKeyword_1; }
		
		//type = ('instantly'|'with a delay')
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('instantly'|'with a delay')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'instantly'
		public Keyword getTypeInstantlyKeyword_2_0_0() { return cTypeInstantlyKeyword_2_0_0; }
		
		//'with a delay'
		public Keyword getTypeWithADelayKeyword_2_0_1() { return cTypeWithADelayKeyword_2_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }
		
		//'reach'
		public Keyword getReachKeyword_4() { return cReachKeyword_4; }
		
		//locations=[Location|EString]
		public Assignment getLocationsAssignment_5() { return cLocationsAssignment_5; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_5_0() { return cLocationsLocationCrossReference_5_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_5_0_1() { return cLocationsLocationEStringParserRuleCall_5_0_1; }
		
		//'by'
		public Keyword getByKeyword_6() { return cByKeyword_6; }
		
		//(condition=[Condition|EString])
		public Assignment getConditionAssignment_7() { return cConditionAssignment_7; }
		
		//[Condition|EString]
		public CrossReference getConditionConditionCrossReference_7_0() { return cConditionConditionCrossReference_7_0; }
		
		//EString
		public RuleCall getConditionConditionEStringParserRuleCall_7_0_1() { return cConditionConditionEStringParserRuleCall_7_0_1; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWaitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWaitInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLocationsLocationCrossReference_2_0 = (CrossReference)cLocationsAssignment_2.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_2_0_1 = (RuleCall)cLocationsLocationCrossReference_2_0.eContents().get(1);
		private final Keyword cUntilKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cConditionConditionCrossReference_4_0 = (CrossReference)cConditionAssignment_4.eContents().get(0);
		private final RuleCall cConditionConditionEStringParserRuleCall_4_0_1 = (RuleCall)cConditionConditionCrossReference_4_0.eContents().get(1);
		
		//Wait returns Wait:
		//    {Wait}
		//    'wait in' locations+=[Location|EString]
		//    'until' condition=[Condition|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{Wait}
		//'wait in' locations+=[Location|EString]
		//'until' condition=[Condition|EString]
		public Group getGroup() { return cGroup; }
		
		//{Wait}
		public Action getWaitAction_0() { return cWaitAction_0; }
		
		//'wait in'
		public Keyword getWaitInKeyword_1() { return cWaitInKeyword_1; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_2() { return cLocationsAssignment_2; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_2_0() { return cLocationsLocationCrossReference_2_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_2_0_1() { return cLocationsLocationEStringParserRuleCall_2_0_1; }
		
		//'until'
		public Keyword getUntilKeyword_3() { return cUntilKeyword_3; }
		
		//condition=[Condition|EString]
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//[Condition|EString]
		public CrossReference getConditionConditionCrossReference_4_0() { return cConditionConditionCrossReference_4_0; }
		
		//EString
		public RuleCall getConditionConditionEStringParserRuleCall_4_0_1() { return cConditionConditionEStringParserRuleCall_4_0_1; }
	}
	public class DelayedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Delayed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDelayedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDelayKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cConditionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cConditionConditionCrossReference_6_0 = (CrossReference)cConditionAssignment_6.eContents().get(0);
		private final RuleCall cConditionConditionEStringParserRuleCall_6_0_1 = (RuleCall)cConditionConditionCrossReference_6_0.eContents().get(1);
		private final Keyword cByKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cExecutingKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Alternatives cAlternatives_8_0_1 = (Alternatives)cGroup_8_0.eContents().get(1);
		private final Assignment cActionAssignment_8_0_1_0 = (Assignment)cAlternatives_8_0_1.eContents().get(0);
		private final CrossReference cActionActionCrossReference_8_0_1_0_0 = (CrossReference)cActionAssignment_8_0_1_0.eContents().get(0);
		private final RuleCall cActionActionEStringParserRuleCall_8_0_1_0_0_1 = (RuleCall)cActionActionCrossReference_8_0_1_0_0.eContents().get(1);
		private final Assignment cPatternAssignment_8_0_1_1 = (Assignment)cAlternatives_8_0_1.eContents().get(1);
		private final RuleCall cPatternSpecificationPatternsParserRuleCall_8_0_1_1_0 = (RuleCall)cPatternAssignment_8_0_1_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cReachingKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cLocationsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final CrossReference cLocationsLocationCrossReference_8_1_1_0 = (CrossReference)cLocationsAssignment_8_1_1.eContents().get(0);
		private final RuleCall cLocationsLocationEStringParserRuleCall_8_1_1_0_1 = (RuleCall)cLocationsLocationCrossReference_8_1_1_0.eContents().get(1);
		
		//Delayed returns Delayed:
		//    {Delayed}
		//    'with' 'a' 'delay' 'to' 'condition' (condition=[Condition|EString]) 'by'
		//    ('executing' (action=[Action|EString] | pattern=SpecificationPatterns) | 'reaching' locations+=[Location|EString]);
		@Override public ParserRule getRule() { return rule; }
		
		//{Delayed}
		//'with' 'a' 'delay' 'to' 'condition' (condition=[Condition|EString]) 'by'
		//('executing' (action=[Action|EString] | pattern=SpecificationPatterns) | 'reaching' locations+=[Location|EString])
		public Group getGroup() { return cGroup; }
		
		//{Delayed}
		public Action getDelayedAction_0() { return cDelayedAction_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'a'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//'delay'
		public Keyword getDelayKeyword_3() { return cDelayKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//'condition'
		public Keyword getConditionKeyword_5() { return cConditionKeyword_5; }
		
		//(condition=[Condition|EString])
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }
		
		//[Condition|EString]
		public CrossReference getConditionConditionCrossReference_6_0() { return cConditionConditionCrossReference_6_0; }
		
		//EString
		public RuleCall getConditionConditionEStringParserRuleCall_6_0_1() { return cConditionConditionEStringParserRuleCall_6_0_1; }
		
		//'by'
		public Keyword getByKeyword_7() { return cByKeyword_7; }
		
		//('executing' (action=[Action|EString] | pattern=SpecificationPatterns) | 'reaching' locations+=[Location|EString])
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'executing' (action=[Action|EString] | pattern=SpecificationPatterns)
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'executing'
		public Keyword getExecutingKeyword_8_0_0() { return cExecutingKeyword_8_0_0; }
		
		//(action=[Action|EString] | pattern=SpecificationPatterns)
		public Alternatives getAlternatives_8_0_1() { return cAlternatives_8_0_1; }
		
		//action=[Action|EString]
		public Assignment getActionAssignment_8_0_1_0() { return cActionAssignment_8_0_1_0; }
		
		//[Action|EString]
		public CrossReference getActionActionCrossReference_8_0_1_0_0() { return cActionActionCrossReference_8_0_1_0_0; }
		
		//EString
		public RuleCall getActionActionEStringParserRuleCall_8_0_1_0_0_1() { return cActionActionEStringParserRuleCall_8_0_1_0_0_1; }
		
		//pattern=SpecificationPatterns
		public Assignment getPatternAssignment_8_0_1_1() { return cPatternAssignment_8_0_1_1; }
		
		//SpecificationPatterns
		public RuleCall getPatternSpecificationPatternsParserRuleCall_8_0_1_1_0() { return cPatternSpecificationPatternsParserRuleCall_8_0_1_1_0; }
		
		//'reaching' locations+=[Location|EString]
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'reaching'
		public Keyword getReachingKeyword_8_1_0() { return cReachingKeyword_8_1_0; }
		
		//locations+=[Location|EString]
		public Assignment getLocationsAssignment_8_1_1() { return cLocationsAssignment_8_1_1; }
		
		//[Location|EString]
		public CrossReference getLocationsLocationCrossReference_8_1_1_0() { return cLocationsLocationCrossReference_8_1_1_0; }
		
		//EString
		public RuleCall getLocationsLocationEStringParserRuleCall_8_1_1_0_1() { return cLocationsLocationEStringParserRuleCall_8_1_1_0_1; }
	}
	public class ElementaryPatternsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementaryPatterns");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaximizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtMostParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWithinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* Elementary (quantitative) patterns */
		//ElementaryPatterns returns ElementaryPatterns:
		//    Maximize | AtMost | Within;
		@Override public ParserRule getRule() { return rule; }
		
		//Maximize | AtMost | Within
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Maximize
		public RuleCall getMaximizeParserRuleCall_0() { return cMaximizeParserRuleCall_0; }
		
		//AtMost
		public RuleCall getAtMostParserRuleCall_1() { return cAtMostParserRuleCall_1; }
		
		//Within
		public RuleCall getWithinParserRuleCall_2() { return cWithinParserRuleCall_2; }
	}
	public class MaximizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Maximize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaximizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRewardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRewardRewardKeyword_1_0 = (Keyword)cRewardAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeMaximizeKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeMinimizeKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Assignment cMeasureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMeasureEStringParserRuleCall_3_0 = (RuleCall)cMeasureAssignment_3.eContents().get(0);
		private final Assignment cMissionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMissionMission_no_prob_rewParserRuleCall_4_0 = (RuleCall)cMissionAssignment_4.eContents().get(0);
		
		//Maximize returns Maximize:
		//    {Maximize}
		//    reward = ('reward')?
		//    //Mission cannot be elementary patterns to avoid nested prob. or rewards.
		//    type=('maximize'|'minimize') measure=EString mission= Mission_no_prob_rew;
		@Override public ParserRule getRule() { return rule; }
		
		//{Maximize}
		//reward = ('reward')?
		////Mission cannot be elementary patterns to avoid nested prob. or rewards.
		//type=('maximize'|'minimize') measure=EString mission= Mission_no_prob_rew
		public Group getGroup() { return cGroup; }
		
		//{Maximize}
		public Action getMaximizeAction_0() { return cMaximizeAction_0; }
		
		//reward = ('reward')?
		public Assignment getRewardAssignment_1() { return cRewardAssignment_1; }
		
		//('reward')
		public Keyword getRewardRewardKeyword_1_0() { return cRewardRewardKeyword_1_0; }
		
		////Mission cannot be elementary patterns to avoid nested prob. or rewards.
		//type=('maximize'|'minimize')
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('maximize'|'minimize')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'maximize'
		public Keyword getTypeMaximizeKeyword_2_0_0() { return cTypeMaximizeKeyword_2_0_0; }
		
		//'minimize'
		public Keyword getTypeMinimizeKeyword_2_0_1() { return cTypeMinimizeKeyword_2_0_1; }
		
		//measure=EString
		public Assignment getMeasureAssignment_3() { return cMeasureAssignment_3; }
		
		//EString
		public RuleCall getMeasureEStringParserRuleCall_3_0() { return cMeasureEStringParserRuleCall_3_0; }
		
		//mission= Mission_no_prob_rew
		public Assignment getMissionAssignment_4() { return cMissionAssignment_4; }
		
		//Mission_no_prob_rew
		public RuleCall getMissionMission_no_prob_rewParserRuleCall_4_0() { return cMissionMission_no_prob_rewParserRuleCall_4_0; }
	}
	public class AtMostElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AtMost");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtMostAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRewardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRewardRewardKeyword_1_0 = (Keyword)cRewardAssignment_1.eContents().get(0);
		private final Assignment cMeasureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureEStringParserRuleCall_2_0 = (RuleCall)cMeasureAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeAtMostKeyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeLessThanKeyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Keyword cTypeAtLeastKeyword_3_0_2 = (Keyword)cTypeAlternatives_3_0.eContents().get(2);
		private final Keyword cTypeGreaterThanKeyword_3_0_3 = (Keyword)cTypeAlternatives_3_0.eContents().get(3);
		private final Keyword cTypeExactlyKeyword_3_0_4 = (Keyword)cTypeAlternatives_3_0.eContents().get(4);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEDoubleParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cMissionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMissionMission_no_prob_rewParserRuleCall_5_0 = (RuleCall)cMissionAssignment_5.eContents().get(0);
		
		//AtMost returns AtMost:
		//    {AtMost}
		//    reward = ('reward')?
		//    measure=EString type=('at most'|'less than'|'at least'|'greater than'| 'exactly') value=EDouble mission=Mission_no_prob_rew;
		@Override public ParserRule getRule() { return rule; }
		
		//{AtMost}
		//reward = ('reward')?
		//measure=EString type=('at most'|'less than'|'at least'|'greater than'| 'exactly') value=EDouble mission=Mission_no_prob_rew
		public Group getGroup() { return cGroup; }
		
		//{AtMost}
		public Action getAtMostAction_0() { return cAtMostAction_0; }
		
		//reward = ('reward')?
		public Assignment getRewardAssignment_1() { return cRewardAssignment_1; }
		
		//('reward')
		public Keyword getRewardRewardKeyword_1_0() { return cRewardRewardKeyword_1_0; }
		
		//measure=EString
		public Assignment getMeasureAssignment_2() { return cMeasureAssignment_2; }
		
		//EString
		public RuleCall getMeasureEStringParserRuleCall_2_0() { return cMeasureEStringParserRuleCall_2_0; }
		
		//type=('at most'|'less than'|'at least'|'greater than'| 'exactly')
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//('at most'|'less than'|'at least'|'greater than'| 'exactly')
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//'at most'
		public Keyword getTypeAtMostKeyword_3_0_0() { return cTypeAtMostKeyword_3_0_0; }
		
		//'less than'
		public Keyword getTypeLessThanKeyword_3_0_1() { return cTypeLessThanKeyword_3_0_1; }
		
		//'at least'
		public Keyword getTypeAtLeastKeyword_3_0_2() { return cTypeAtLeastKeyword_3_0_2; }
		
		//'greater than'
		public Keyword getTypeGreaterThanKeyword_3_0_3() { return cTypeGreaterThanKeyword_3_0_3; }
		
		//'exactly'
		public Keyword getTypeExactlyKeyword_3_0_4() { return cTypeExactlyKeyword_3_0_4; }
		
		//value=EDouble
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_4_0() { return cValueEDoubleParserRuleCall_4_0; }
		
		//mission=Mission_no_prob_rew
		public Assignment getMissionAssignment_5() { return cMissionAssignment_5; }
		
		//Mission_no_prob_rew
		public RuleCall getMissionMission_no_prob_rewParserRuleCall_5_0() { return cMissionMission_no_prob_rewParserRuleCall_5_0; }
	}
	public class WithinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Within");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWithinAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRewardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRewardRewardKeyword_1_0 = (Keyword)cRewardAssignment_1.eContents().get(0);
		private final Assignment cMeasureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureEStringParserRuleCall_2_0 = (RuleCall)cMeasureAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeWithinKeyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeStrictlyWithinKeyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Assignment cValue1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue1EDoubleParserRuleCall_4_0 = (RuleCall)cValue1Assignment_4.eContents().get(0);
		private final Keyword cAndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValue2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValue2EDoubleParserRuleCall_6_0 = (RuleCall)cValue2Assignment_6.eContents().get(0);
		private final Assignment cMissionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMissionMission_no_prob_rewParserRuleCall_7_0 = (RuleCall)cMissionAssignment_7.eContents().get(0);
		
		//Within returns Within:
		//    {Within}
		//    reward = ('reward')?
		//    measure=EString type=('within'|'strictly within') value1=EDouble 'and' value2=EDouble mission=Mission_no_prob_rew;
		@Override public ParserRule getRule() { return rule; }
		
		//{Within}
		//reward = ('reward')?
		//measure=EString type=('within'|'strictly within') value1=EDouble 'and' value2=EDouble mission=Mission_no_prob_rew
		public Group getGroup() { return cGroup; }
		
		//{Within}
		public Action getWithinAction_0() { return cWithinAction_0; }
		
		//reward = ('reward')?
		public Assignment getRewardAssignment_1() { return cRewardAssignment_1; }
		
		//('reward')
		public Keyword getRewardRewardKeyword_1_0() { return cRewardRewardKeyword_1_0; }
		
		//measure=EString
		public Assignment getMeasureAssignment_2() { return cMeasureAssignment_2; }
		
		//EString
		public RuleCall getMeasureEStringParserRuleCall_2_0() { return cMeasureEStringParserRuleCall_2_0; }
		
		//type=('within'|'strictly within')
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//('within'|'strictly within')
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//'within'
		public Keyword getTypeWithinKeyword_3_0_0() { return cTypeWithinKeyword_3_0_0; }
		
		//'strictly within'
		public Keyword getTypeStrictlyWithinKeyword_3_0_1() { return cTypeStrictlyWithinKeyword_3_0_1; }
		
		//value1=EDouble
		public Assignment getValue1Assignment_4() { return cValue1Assignment_4; }
		
		//EDouble
		public RuleCall getValue1EDoubleParserRuleCall_4_0() { return cValue1EDoubleParserRuleCall_4_0; }
		
		//'and'
		public Keyword getAndKeyword_5() { return cAndKeyword_5; }
		
		//value2=EDouble
		public Assignment getValue2Assignment_6() { return cValue2Assignment_6; }
		
		//EDouble
		public RuleCall getValue2EDoubleParserRuleCall_6_0() { return cValue2EDoubleParserRuleCall_6_0; }
		
		//mission=Mission_no_prob_rew
		public Assignment getMissionAssignment_7() { return cMissionAssignment_7; }
		
		//Mission_no_prob_rew
		public RuleCall getMissionMission_no_prob_rewParserRuleCall_7_0() { return cMissionMission_no_prob_rewParserRuleCall_7_0; }
	}
	public class CompositePatternsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CompositePatterns");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConservationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPreservationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeoutParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRepeatParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProportionalParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExecuteParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAccrueParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReliabilityConfidenceParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEquidistanceParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTrailParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		///* Composite patterns */
		//CompositePatterns returns CompositePatterns:
		//    Conservation | Preservation | Pause | Timeout| Repeat
		//    | End | Proportional | Execute | Accrue | ReliabilityConfidence | Equidistance
		//     | Trail  ;
		@Override public ParserRule getRule() { return rule; }
		
		//Conservation | Preservation | Pause | Timeout| Repeat
		//| End | Proportional | Execute | Accrue | ReliabilityConfidence | Equidistance
		// | Trail
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Conservation
		public RuleCall getConservationParserRuleCall_0() { return cConservationParserRuleCall_0; }
		
		//Preservation
		public RuleCall getPreservationParserRuleCall_1() { return cPreservationParserRuleCall_1; }
		
		//Pause
		public RuleCall getPauseParserRuleCall_2() { return cPauseParserRuleCall_2; }
		
		//Timeout
		public RuleCall getTimeoutParserRuleCall_3() { return cTimeoutParserRuleCall_3; }
		
		//Repeat
		public RuleCall getRepeatParserRuleCall_4() { return cRepeatParserRuleCall_4; }
		
		//End
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
		
		//Proportional
		public RuleCall getProportionalParserRuleCall_6() { return cProportionalParserRuleCall_6; }
		
		//Execute
		public RuleCall getExecuteParserRuleCall_7() { return cExecuteParserRuleCall_7; }
		
		//Accrue
		public RuleCall getAccrueParserRuleCall_8() { return cAccrueParserRuleCall_8; }
		
		//ReliabilityConfidence
		public RuleCall getReliabilityConfidenceParserRuleCall_9() { return cReliabilityConfidenceParserRuleCall_9; }
		
		//Equidistance
		public RuleCall getEquidistanceParserRuleCall_10() { return cEquidistanceParserRuleCall_10; }
		
		//Trail
		public RuleCall getTrailParserRuleCall_11() { return cTrailParserRuleCall_11; }
	}
	public class ConservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Conservation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConservationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConserveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureEStringParserRuleCall_2_0 = (RuleCall)cMeasureAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMissionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMissionsMission_no_prob_rewParserRuleCall_4_0 = (RuleCall)cMissionsAssignment_4.eContents().get(0);
		
		//Conservation returns Conservation:
		//    {Conservation}
		//    'conserve' measure=EString 'while' missions=Mission_no_prob_rew;
		@Override public ParserRule getRule() { return rule; }
		
		//{Conservation}
		//'conserve' measure=EString 'while' missions=Mission_no_prob_rew
		public Group getGroup() { return cGroup; }
		
		//{Conservation}
		public Action getConservationAction_0() { return cConservationAction_0; }
		
		//'conserve'
		public Keyword getConserveKeyword_1() { return cConserveKeyword_1; }
		
		//measure=EString
		public Assignment getMeasureAssignment_2() { return cMeasureAssignment_2; }
		
		//EString
		public RuleCall getMeasureEStringParserRuleCall_2_0() { return cMeasureEStringParserRuleCall_2_0; }
		
		//'while'
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }
		
		//missions=Mission_no_prob_rew
		public Assignment getMissionsAssignment_4() { return cMissionsAssignment_4; }
		
		//Mission_no_prob_rew
		public RuleCall getMissionsMission_no_prob_rewParserRuleCall_4_0() { return cMissionsMission_no_prob_rewParserRuleCall_4_0; }
	}
	public class PreservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Preservation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreservationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPreserveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureEStringParserRuleCall_2_0 = (RuleCall)cMeasureAssignment_2.eContents().get(0);
		private final Keyword cWithinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValue1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue1EDoubleParserRuleCall_5_0 = (RuleCall)cValue1Assignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValue2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValue2EDoubleParserRuleCall_7_0 = (RuleCall)cValue2Assignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cWhileKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMissionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMissionsMission_no_prob_rewParserRuleCall_10_0 = (RuleCall)cMissionsAssignment_10.eContents().get(0);
		
		//Preservation returns Preservation:
		//    {Preservation}
		//    'preserve' measure=EString 'within' '[' value1=EDouble ',' value2=EDouble ']' 'while' missions=Mission_no_prob_rew;
		@Override public ParserRule getRule() { return rule; }
		
		//{Preservation}
		//'preserve' measure=EString 'within' '[' value1=EDouble ',' value2=EDouble ']' 'while' missions=Mission_no_prob_rew
		public Group getGroup() { return cGroup; }
		
		//{Preservation}
		public Action getPreservationAction_0() { return cPreservationAction_0; }
		
		//'preserve'
		public Keyword getPreserveKeyword_1() { return cPreserveKeyword_1; }
		
		//measure=EString
		public Assignment getMeasureAssignment_2() { return cMeasureAssignment_2; }
		
		//EString
		public RuleCall getMeasureEStringParserRuleCall_2_0() { return cMeasureEStringParserRuleCall_2_0; }
		
		//'within'
		public Keyword getWithinKeyword_3() { return cWithinKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//value1=EDouble
		public Assignment getValue1Assignment_5() { return cValue1Assignment_5; }
		
		//EDouble
		public RuleCall getValue1EDoubleParserRuleCall_5_0() { return cValue1EDoubleParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//value2=EDouble
		public Assignment getValue2Assignment_7() { return cValue2Assignment_7; }
		
		//EDouble
		public RuleCall getValue2EDoubleParserRuleCall_7_0() { return cValue2EDoubleParserRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//'while'
		public Keyword getWhileKeyword_9() { return cWhileKeyword_9; }
		
		//missions=Mission_no_prob_rew
		public Assignment getMissionsAssignment_10() { return cMissionsAssignment_10; }
		
		//Mission_no_prob_rew
		public RuleCall getMissionsMission_no_prob_rewParserRuleCall_10_0() { return cMissionsMission_no_prob_rewParserRuleCall_10_0; }
	}
	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPauseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEIntParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cMissionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMissionsMissionsParserRuleCall_3_0 = (RuleCall)cMissionsAssignment_3.eContents().get(0);
		
		//Pause returns Pause:
		//    {Pause}
		//    'pause' value=EInt missions=Missions;
		@Override public ParserRule getRule() { return rule; }
		
		//{Pause}
		//'pause' value=EInt missions=Missions
		public Group getGroup() { return cGroup; }
		
		//{Pause}
		public Action getPauseAction_0() { return cPauseAction_0; }
		
		//'pause'
		public Keyword getPauseKeyword_1() { return cPauseKeyword_1; }
		
		//value=EInt
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_2_0() { return cValueEIntParserRuleCall_2_0; }
		
		//missions=Missions
		public Assignment getMissionsAssignment_3() { return cMissionsAssignment_3; }
		
		//Missions
		public RuleCall getMissionsMissionsParserRuleCall_3_0() { return cMissionsMissionsParserRuleCall_3_0; }
	}
	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Timeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeoutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEIntParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cMissionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMissionsMissionsParserRuleCall_3_0 = (RuleCall)cMissionsAssignment_3.eContents().get(0);
		
		//Timeout returns Timeout:
		//    {Timeout}
		//    'timeout' value=EInt missions=Missions;
		@Override public ParserRule getRule() { return rule; }
		
		//{Timeout}
		//'timeout' value=EInt missions=Missions
		public Group getGroup() { return cGroup; }
		
		//{Timeout}
		public Action getTimeoutAction_0() { return cTimeoutAction_0; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_1() { return cTimeoutKeyword_1; }
		
		//value=EInt
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_2_0() { return cValueEIntParserRuleCall_2_0; }
		
		//missions=Missions
		public Assignment getMissionsAssignment_3() { return cMissionsAssignment_3; }
		
		//Missions
		public RuleCall getMissionsMissionsParserRuleCall_3_0() { return cMissionsMissionsParserRuleCall_3_0; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepeatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRepeatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMissionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMissionsMissionsParserRuleCall_2_0 = (RuleCall)cMissionsAssignment_2.eContents().get(0);
		private final Keyword cEveryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEIntParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Repeat returns Repeat:
		//    {Repeat}
		//    'repeat' missions=Missions 'every'  value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{Repeat}
		//'repeat' missions=Missions 'every'  value=EInt
		public Group getGroup() { return cGroup; }
		
		//{Repeat}
		public Action getRepeatAction_0() { return cRepeatAction_0; }
		
		//'repeat'
		public Keyword getRepeatKeyword_1() { return cRepeatKeyword_1; }
		
		//missions=Missions
		public Assignment getMissionsAssignment_2() { return cMissionsAssignment_2; }
		
		//Missions
		public RuleCall getMissionsMissionsParserRuleCall_2_0() { return cMissionsMissionsParserRuleCall_2_0; }
		
		//'every'
		public Keyword getEveryKeyword_3() { return cEveryKeyword_3; }
		
		//value=EInt
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_4_0() { return cValueEIntParserRuleCall_4_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMissionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMissionsMissionsParserRuleCall_2_0 = (RuleCall)cMissionsAssignment_2.eContents().get(0);
		private final Keyword cExactly_atKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEIntParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//End returns End:
		//    {End}
		//    'end' missions=Missions 'exactly_at' value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{End}
		//'end' missions=Missions 'exactly_at' value=EInt
		public Group getGroup() { return cGroup; }
		
		//{End}
		public Action getEndAction_0() { return cEndAction_0; }
		
		//'end'
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
		
		//missions=Missions
		public Assignment getMissionsAssignment_2() { return cMissionsAssignment_2; }
		
		//Missions
		public RuleCall getMissionsMissionsParserRuleCall_2_0() { return cMissionsMissionsParserRuleCall_2_0; }
		
		//'exactly_at'
		public Keyword getExactly_atKeyword_3() { return cExactly_atKeyword_3; }
		
		//value=EInt
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_4_0() { return cValueEIntParserRuleCall_4_0; }
	}
	public class ProportionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Proportional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProportionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMission1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMission1MissionsParserRuleCall_3_0 = (RuleCall)cMission1Assignment_3.eContents().get(0);
		private final Keyword cProportionalToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMission2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMission2MissionsParserRuleCall_5_0 = (RuleCall)cMission2Assignment_5.eContents().get(0);
		private final Keyword cByKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFactorKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueEIntParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		
		// //***delete all except missions and add t
		//    //NOTE: I use exactly at instead of exactly_at as the paper
		//    //***'abort' missions=Missions 'if' (condition=[Condition|EString]| locationevent+=LocationEvent); // added + in "locationevent+=LocationEvent" to delete error
		//Proportional returns Proportional:
		//    {Proportional}
		//    'time' 'of' mission1=Missions 'proportional to' mission2=Missions 'by' 'factor' value=EInt //---NOTE: MAKE ALL INT OR FLOAT***
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Proportional}
		//'time' 'of' mission1=Missions 'proportional to' mission2=Missions 'by' 'factor' value=EInt
		public Group getGroup() { return cGroup; }
		
		//{Proportional}
		public Action getProportionalAction_0() { return cProportionalAction_0; }
		
		//'time'
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//mission1=Missions
		public Assignment getMission1Assignment_3() { return cMission1Assignment_3; }
		
		//Missions
		public RuleCall getMission1MissionsParserRuleCall_3_0() { return cMission1MissionsParserRuleCall_3_0; }
		
		//'proportional to'
		public Keyword getProportionalToKeyword_4() { return cProportionalToKeyword_4; }
		
		//mission2=Missions
		public Assignment getMission2Assignment_5() { return cMission2Assignment_5; }
		
		//Missions
		public RuleCall getMission2MissionsParserRuleCall_5_0() { return cMission2MissionsParserRuleCall_5_0; }
		
		//'by'
		public Keyword getByKeyword_6() { return cByKeyword_6; }
		
		//'factor'
		public Keyword getFactorKeyword_7() { return cFactorKeyword_7; }
		
		//value=EInt
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_8_0() { return cValueEIntParserRuleCall_8_0; }
	}
	public class ExecuteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Execute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecuteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExecuteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRobotsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRobotsRobotsCrossReference_2_0 = (CrossReference)cRobotsAssignment_2.eContents().get(0);
		private final RuleCall cRobotsRobotsEStringParserRuleCall_2_0_1 = (RuleCall)cRobotsRobotsCrossReference_2_0.eContents().get(1);
		private final Keyword cActionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetOfActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSetOfActionsActionCrossReference_4_0 = (CrossReference)cSetOfActionsAssignment_4.eContents().get(0);
		private final RuleCall cSetOfActionsActionEStringParserRuleCall_4_0_1 = (RuleCall)cSetOfActionsActionCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSetOfActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSetOfActionsActionCrossReference_5_1_0 = (CrossReference)cSetOfActionsAssignment_5_1.eContents().get(0);
		private final RuleCall cSetOfActionsActionEStringParserRuleCall_5_1_0_1 = (RuleCall)cSetOfActionsActionCrossReference_5_1_0.eContents().get(1);
		
		//Execute returns Execute:
		//    {Execute}
		//    'execute' robots=[Robots|EString] 'actions' setOfActions+=[Action|EString] ( "," setOfActions+=[Action|EString])*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Execute}
		//'execute' robots=[Robots|EString] 'actions' setOfActions+=[Action|EString] ( "," setOfActions+=[Action|EString])*
		public Group getGroup() { return cGroup; }
		
		//{Execute}
		public Action getExecuteAction_0() { return cExecuteAction_0; }
		
		//'execute'
		public Keyword getExecuteKeyword_1() { return cExecuteKeyword_1; }
		
		//robots=[Robots|EString]
		public Assignment getRobotsAssignment_2() { return cRobotsAssignment_2; }
		
		//[Robots|EString]
		public CrossReference getRobotsRobotsCrossReference_2_0() { return cRobotsRobotsCrossReference_2_0; }
		
		//EString
		public RuleCall getRobotsRobotsEStringParserRuleCall_2_0_1() { return cRobotsRobotsEStringParserRuleCall_2_0_1; }
		
		//'actions'
		public Keyword getActionsKeyword_3() { return cActionsKeyword_3; }
		
		//setOfActions+=[Action|EString]
		public Assignment getSetOfActionsAssignment_4() { return cSetOfActionsAssignment_4; }
		
		//[Action|EString]
		public CrossReference getSetOfActionsActionCrossReference_4_0() { return cSetOfActionsActionCrossReference_4_0; }
		
		//EString
		public RuleCall getSetOfActionsActionEStringParserRuleCall_4_0_1() { return cSetOfActionsActionEStringParserRuleCall_4_0_1; }
		
		//( "," setOfActions+=[Action|EString])*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//setOfActions+=[Action|EString]
		public Assignment getSetOfActionsAssignment_5_1() { return cSetOfActionsAssignment_5_1; }
		
		//[Action|EString]
		public CrossReference getSetOfActionsActionCrossReference_5_1_0() { return cSetOfActionsActionCrossReference_5_1_0; }
		
		//EString
		public RuleCall getSetOfActionsActionEStringParserRuleCall_5_1_0_1() { return cSetOfActionsActionEStringParserRuleCall_5_1_0_1; }
	}
	public class AccrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Accrue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAccrueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRobotsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRobotsRobotsCrossReference_1_0 = (CrossReference)cRobotsAssignment_1.eContents().get(0);
		private final RuleCall cRobotsRobotsEStringParserRuleCall_1_0_1 = (RuleCall)cRobotsRobotsCrossReference_1_0.eContents().get(1);
		private final Keyword cAccrueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMeasureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMeasureEStringParserRuleCall_3_0 = (RuleCall)cMeasureAssignment_3.eContents().get(0);
		private final Keyword cWhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMissionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMissionsMissionsParserRuleCall_5_0 = (RuleCall)cMissionsAssignment_5.eContents().get(0);
		
		//Accrue returns Accrue:
		//    {Accrue}
		//    robots=[Robots|EString] 'accrue' measure=EString 'while' missions=Missions;
		@Override public ParserRule getRule() { return rule; }
		
		//{Accrue}
		//robots=[Robots|EString] 'accrue' measure=EString 'while' missions=Missions
		public Group getGroup() { return cGroup; }
		
		//{Accrue}
		public Action getAccrueAction_0() { return cAccrueAction_0; }
		
		//robots=[Robots|EString]
		public Assignment getRobotsAssignment_1() { return cRobotsAssignment_1; }
		
		//[Robots|EString]
		public CrossReference getRobotsRobotsCrossReference_1_0() { return cRobotsRobotsCrossReference_1_0; }
		
		//EString
		public RuleCall getRobotsRobotsEStringParserRuleCall_1_0_1() { return cRobotsRobotsEStringParserRuleCall_1_0_1; }
		
		//'accrue'
		public Keyword getAccrueKeyword_2() { return cAccrueKeyword_2; }
		
		//measure=EString
		public Assignment getMeasureAssignment_3() { return cMeasureAssignment_3; }
		
		//EString
		public RuleCall getMeasureEStringParserRuleCall_3_0() { return cMeasureEStringParserRuleCall_3_0; }
		
		//'while'
		public Keyword getWhileKeyword_4() { return cWhileKeyword_4; }
		
		//missions=Missions
		public Assignment getMissionsAssignment_5() { return cMissionsAssignment_5; }
		
		//Missions
		public RuleCall getMissionsMissionsParserRuleCall_5_0() { return cMissionsMissionsParserRuleCall_5_0; }
	}
	public class ReliabilityConfidenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReliabilityConfidence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReliabilityConfidenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAchieveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMissionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMissionsMission_no_prob_rewParserRuleCall_2_0 = (RuleCall)cMissionsAssignment_2.eContents().get(0);
		private final Assignment cType1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cType1Alternatives_3_0 = (Alternatives)cType1Assignment_3.eContents().get(0);
		private final Keyword cType1WithConfidenceKeyword_3_0_0 = (Keyword)cType1Alternatives_3_0.eContents().get(0);
		private final Keyword cType1WithReliabilityKeyword_3_0_1 = (Keyword)cType1Alternatives_3_0.eContents().get(1);
		private final Assignment cMeasureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMeasureEStringParserRuleCall_4_0 = (RuleCall)cMeasureAssignment_4.eContents().get(0);
		private final Assignment cType2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cType2Alternatives_5_0 = (Alternatives)cType2Assignment_5.eContents().get(0);
		private final Keyword cType2GreaterThanKeyword_5_0_0 = (Keyword)cType2Alternatives_5_0.eContents().get(0);
		private final Keyword cType2LessThanKeyword_5_0_1 = (Keyword)cType2Alternatives_5_0.eContents().get(1);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueEDoubleParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		
		//ReliabilityConfidence returns ReliabilityConfidence:
		//    {ReliabilityConfidence}
		//    'achieve' missions=Mission_no_prob_rew type1=('with confidence'|'with reliability') measure=EString type2=('greater than'|'less than') value=EDouble ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReliabilityConfidence}
		//'achieve' missions=Mission_no_prob_rew type1=('with confidence'|'with reliability') measure=EString type2=('greater than'|'less than') value=EDouble
		public Group getGroup() { return cGroup; }
		
		//{ReliabilityConfidence}
		public Action getReliabilityConfidenceAction_0() { return cReliabilityConfidenceAction_0; }
		
		//'achieve'
		public Keyword getAchieveKeyword_1() { return cAchieveKeyword_1; }
		
		//missions=Mission_no_prob_rew
		public Assignment getMissionsAssignment_2() { return cMissionsAssignment_2; }
		
		//Mission_no_prob_rew
		public RuleCall getMissionsMission_no_prob_rewParserRuleCall_2_0() { return cMissionsMission_no_prob_rewParserRuleCall_2_0; }
		
		//type1=('with confidence'|'with reliability')
		public Assignment getType1Assignment_3() { return cType1Assignment_3; }
		
		//('with confidence'|'with reliability')
		public Alternatives getType1Alternatives_3_0() { return cType1Alternatives_3_0; }
		
		//'with confidence'
		public Keyword getType1WithConfidenceKeyword_3_0_0() { return cType1WithConfidenceKeyword_3_0_0; }
		
		//'with reliability'
		public Keyword getType1WithReliabilityKeyword_3_0_1() { return cType1WithReliabilityKeyword_3_0_1; }
		
		//measure=EString
		public Assignment getMeasureAssignment_4() { return cMeasureAssignment_4; }
		
		//EString
		public RuleCall getMeasureEStringParserRuleCall_4_0() { return cMeasureEStringParserRuleCall_4_0; }
		
		//type2=('greater than'|'less than')
		public Assignment getType2Assignment_5() { return cType2Assignment_5; }
		
		//('greater than'|'less than')
		public Alternatives getType2Alternatives_5_0() { return cType2Alternatives_5_0; }
		
		//'greater than'
		public Keyword getType2GreaterThanKeyword_5_0_0() { return cType2GreaterThanKeyword_5_0_0; }
		
		//'less than'
		public Keyword getType2LessThanKeyword_5_0_1() { return cType2LessThanKeyword_5_0_1; }
		
		//value=EDouble
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_6_0() { return cValueEDoubleParserRuleCall_6_0; }
	}
	public class EquidistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Equidistance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquidistanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRobotsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRobotsRobotsCrossReference_1_0 = (CrossReference)cRobotsAssignment_1.eContents().get(0);
		private final RuleCall cRobotsRobotsEStringParserRuleCall_1_0_1 = (RuleCall)cRobotsRobotsCrossReference_1_0.eContents().get(1);
		private final Assignment cMissionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMissionsMissionsParserRuleCall_2_0 = (RuleCall)cMissionsAssignment_2.eContents().get(0);
		private final Keyword cEquidistanceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRobots1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRobots1RobotsCrossReference_4_0 = (CrossReference)cRobots1Assignment_4.eContents().get(0);
		private final RuleCall cRobots1RobotsEStringParserRuleCall_4_0_1 = (RuleCall)cRobots1RobotsCrossReference_4_0.eContents().get(1);
		private final Assignment cRobots2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRobots2RobotsCrossReference_5_0 = (CrossReference)cRobots2Assignment_5.eContents().get(0);
		private final RuleCall cRobots2RobotsEStringParserRuleCall_5_0_1 = (RuleCall)cRobots2RobotsCrossReference_5_0.eContents().get(1);
		
		//Equidistance returns Equidistance:
		//    {Equidistance}
		//    //'keep' 'distance' distance=EInt
		//    robots=[Robots|EString] missions=Missions 'equidistance' robots1=[Robots|EString]  robots2=[Robots|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Equidistance}
		////'keep' 'distance' distance=EInt
		//robots=[Robots|EString] missions=Missions 'equidistance' robots1=[Robots|EString]  robots2=[Robots|EString]
		public Group getGroup() { return cGroup; }
		
		//{Equidistance}
		public Action getEquidistanceAction_0() { return cEquidistanceAction_0; }
		
		////'keep' 'distance' distance=EInt
		//robots=[Robots|EString]
		public Assignment getRobotsAssignment_1() { return cRobotsAssignment_1; }
		
		//[Robots|EString]
		public CrossReference getRobotsRobotsCrossReference_1_0() { return cRobotsRobotsCrossReference_1_0; }
		
		//EString
		public RuleCall getRobotsRobotsEStringParserRuleCall_1_0_1() { return cRobotsRobotsEStringParserRuleCall_1_0_1; }
		
		//missions=Missions
		public Assignment getMissionsAssignment_2() { return cMissionsAssignment_2; }
		
		//Missions
		public RuleCall getMissionsMissionsParserRuleCall_2_0() { return cMissionsMissionsParserRuleCall_2_0; }
		
		//'equidistance'
		public Keyword getEquidistanceKeyword_3() { return cEquidistanceKeyword_3; }
		
		//robots1=[Robots|EString]
		public Assignment getRobots1Assignment_4() { return cRobots1Assignment_4; }
		
		//[Robots|EString]
		public CrossReference getRobots1RobotsCrossReference_4_0() { return cRobots1RobotsCrossReference_4_0; }
		
		//EString
		public RuleCall getRobots1RobotsEStringParserRuleCall_4_0_1() { return cRobots1RobotsEStringParserRuleCall_4_0_1; }
		
		//robots2=[Robots|EString]
		public Assignment getRobots2Assignment_5() { return cRobots2Assignment_5; }
		
		//[Robots|EString]
		public CrossReference getRobots2RobotsCrossReference_5_0() { return cRobots2RobotsCrossReference_5_0; }
		
		//EString
		public RuleCall getRobots2RobotsEStringParserRuleCall_5_0_1() { return cRobots2RobotsEStringParserRuleCall_5_0_1; }
	}
	public class TrailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Trail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrailAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRobotsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRobotsRobotsCrossReference_1_0 = (CrossReference)cRobotsAssignment_1.eContents().get(0);
		private final RuleCall cRobotsRobotsEStringParserRuleCall_1_0_1 = (RuleCall)cRobotsRobotsCrossReference_1_0.eContents().get(1);
		private final Keyword cTrailKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjetToFollowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjetToFollowEStringParserRuleCall_3_0 = (RuleCall)cObjetToFollowAssignment_3.eContents().get(0);
		private final Keyword cWithDistanceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueEIntParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//    //***add all robots
		//Trail returns Trail:
		//    {Trail}
		//    robots=[Robots|EString] 'trail' objetToFollow=EString  'with distance' value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{Trail}
		//robots=[Robots|EString] 'trail' objetToFollow=EString  'with distance' value=EInt
		public Group getGroup() { return cGroup; }
		
		//{Trail}
		public Action getTrailAction_0() { return cTrailAction_0; }
		
		//robots=[Robots|EString]
		public Assignment getRobotsAssignment_1() { return cRobotsAssignment_1; }
		
		//[Robots|EString]
		public CrossReference getRobotsRobotsCrossReference_1_0() { return cRobotsRobotsCrossReference_1_0; }
		
		//EString
		public RuleCall getRobotsRobotsEStringParserRuleCall_1_0_1() { return cRobotsRobotsEStringParserRuleCall_1_0_1; }
		
		//'trail'
		public Keyword getTrailKeyword_2() { return cTrailKeyword_2; }
		
		//objetToFollow=EString
		public Assignment getObjetToFollowAssignment_3() { return cObjetToFollowAssignment_3; }
		
		//EString
		public RuleCall getObjetToFollowEStringParserRuleCall_3_0() { return cObjetToFollowEStringParserRuleCall_3_0; }
		
		//'with distance'
		public Keyword getWithDistanceKeyword_4() { return cWithDistanceKeyword_4; }
		
		//value=EInt
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_5_0() { return cValueEIntParserRuleCall_5_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		///* Others */
		//EDouble returns ecore::EDouble:
		//    INT  '.' INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT  '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	
	private final ProblemSpecificationsElements pProblemSpecifications;
	private final ConditionElements pCondition;
	private final EventElements pEvent;
	private final ActionEndElements pActionEnd;
	private final LocationEventElements pLocationEvent;
	private final LocationElements pLocation;
	private final ActionElements pAction;
	private final RobotsElements pRobots;
	private final EStringElements pEString;
	private final TopMissionsElements pTopMissions;
	private final MissionsElements pMissions;
	private final Mission_no_prob_rewElements pMission_no_prob_rew;
	private final MissionOperationElements pMissionOperation;
	private final ShallMissionsElements pShallMissions;
	private final ComplexMissionsElements pComplexMissions;
	private final NegationElements pNegation;
	private final CompositionElements pComposition;
	private final SpecificationPatternsElements pSpecificationPatterns;
	private final Visit1Elements pVisit1;
	private final PatrolElements pPatrol;
	private final AvoidanceVisitElements pAvoidanceVisit;
	private final Visit2Elements pVisit2;
	private final AvoidElements pAvoid;
	private final ReactElements pReact;
	private final CounteractElements pCounteract;
	private final WaitElements pWait;
	private final DelayedElements pDelayed;
	private final ElementaryPatternsElements pElementaryPatterns;
	private final MaximizeElements pMaximize;
	private final AtMostElements pAtMost;
	private final WithinElements pWithin;
	private final CompositePatternsElements pCompositePatterns;
	private final ConservationElements pConservation;
	private final PreservationElements pPreservation;
	private final PauseElements pPause;
	private final TimeoutElements pTimeout;
	private final RepeatElements pRepeat;
	private final EndElements pEnd;
	private final ProportionalElements pProportional;
	private final ExecuteElements pExecute;
	private final AccrueElements pAccrue;
	private final ReliabilityConfidenceElements pReliabilityConfidence;
	private final EquidistanceElements pEquidistance;
	private final TrailElements pTrail;
	private final EDoubleElements pEDouble;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProblemSpecifications = new ProblemSpecificationsElements();
		this.pCondition = new ConditionElements();
		this.pEvent = new EventElements();
		this.pActionEnd = new ActionEndElements();
		this.pLocationEvent = new LocationEventElements();
		this.pLocation = new LocationElements();
		this.pAction = new ActionElements();
		this.pRobots = new RobotsElements();
		this.pEString = new EStringElements();
		this.pTopMissions = new TopMissionsElements();
		this.pMissions = new MissionsElements();
		this.pMission_no_prob_rew = new Mission_no_prob_rewElements();
		this.pMissionOperation = new MissionOperationElements();
		this.pShallMissions = new ShallMissionsElements();
		this.pComplexMissions = new ComplexMissionsElements();
		this.pNegation = new NegationElements();
		this.pComposition = new CompositionElements();
		this.pSpecificationPatterns = new SpecificationPatternsElements();
		this.pVisit1 = new Visit1Elements();
		this.pPatrol = new PatrolElements();
		this.pAvoidanceVisit = new AvoidanceVisitElements();
		this.pVisit2 = new Visit2Elements();
		this.pAvoid = new AvoidElements();
		this.pReact = new ReactElements();
		this.pCounteract = new CounteractElements();
		this.pWait = new WaitElements();
		this.pDelayed = new DelayedElements();
		this.pElementaryPatterns = new ElementaryPatternsElements();
		this.pMaximize = new MaximizeElements();
		this.pAtMost = new AtMostElements();
		this.pWithin = new WithinElements();
		this.pCompositePatterns = new CompositePatternsElements();
		this.pConservation = new ConservationElements();
		this.pPreservation = new PreservationElements();
		this.pPause = new PauseElements();
		this.pTimeout = new TimeoutElements();
		this.pRepeat = new RepeatElements();
		this.pEnd = new EndElements();
		this.pProportional = new ProportionalElements();
		this.pExecute = new ExecuteElements();
		this.pAccrue = new AccrueElements();
		this.pReliabilityConfidence = new ReliabilityConfidenceElements();
		this.pEquidistance = new EquidistanceElements();
		this.pTrail = new TrailElements();
		this.pEDouble = new EDoubleElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ProblemSpecifications returns ProblemSpecifications:
	//    {ProblemSpecifications}
	//    'problem' 'specifications'
	//    '{'
	//        ('locations:' location+=Location ( "," location+=Location)* )?
	//        ('actions:' action+=Action ( "," action+=Action)* )?
	//        ('robots:' robots+=Robots ( "," robots+=Robots)* )?
	//        ('conditions:' condition+=Condition (  condition+=Condition)* )?
	//        ('missions:'  topmissions+=TopMissions ( ";" topmissions+=TopMissions)* )?
	//        //('movement' 'patterns:'  specificationPatterns+=SpecificationPatterns ( "," specificationPatterns+=SpecificationPatterns)* )?
	//        //('elementary' 'patterns:' '{' elementaryPatterns+=ElementaryPatterns ( "," elementaryPatterns+=ElementaryPatterns)* '}' )?
	//        //('composite' 'patterns:' '{' compositePatterns+=CompositePatterns ( "," compositePatterns+=CompositePatterns)* '}' )?
	//    '}';
	public ProblemSpecificationsElements getProblemSpecificationsAccess() {
		return pProblemSpecifications;
	}
	
	public ParserRule getProblemSpecificationsRule() {
		return getProblemSpecificationsAccess().getRule();
	}
	
	//Condition returns Condition:
	//     Event | ActionEnd | LocationEvent;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Event returns Event:
	//    {Event}
	//    name=EString ':'
	//    condition=EString 'is' 'true' ('('description=EString ')')?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//ActionEnd returns ActionEnd:
	//    {ActionEnd}
	//    name=EString ':'
	//    action=[Action|EString] 'is' 'ended' ('('description=EString ')')?;
	public ActionEndElements getActionEndAccess() {
		return pActionEnd;
	}
	
	public ParserRule getActionEndRule() {
		return getActionEndAccess().getRule();
	}
	
	//LocationEvent returns LocationEvent:
	//    {LocationEvent}
	//    name=EString ':'
	//    robots=[Robots|EString] 'at loc' location=[Location|EString]  ('('description=EString ')')?;
	public LocationEventElements getLocationEventAccess() {
		return pLocationEvent;
	}
	
	public ParserRule getLocationEventRule() {
		return getLocationEventAccess().getRule();
	}
	
	//Location returns Location:
	//    {Location}
	//    name=EString;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//Action returns Action:
	//    {Action}
	//    name=EString;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Robots returns Robots:
	//    {Robots}
	//    name=EString;
	public RobotsElements getRobotsAccess() {
		return pRobots;
	}
	
	public ParserRule getRobotsRule() {
		return getRobotsAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	///* Missions and mission composition */
	//TopMissions returns TopMissions:
	//    name=EString  ':'
	//    mission=Missions
	//;
	public TopMissionsElements getTopMissionsAccess() {
		return pTopMissions;
	}
	
	public ParserRule getTopMissionsRule() {
		return getTopMissionsAccess().getRule();
	}
	
	//Missions returns Missions:
	//    ShallMissions | ComplexMissions | ElementaryPatterns | CompositePatterns;
	public MissionsElements getMissionsAccess() {
		return pMissions;
	}
	
	public ParserRule getMissionsRule() {
		return getMissionsAccess().getRule();
	}
	
	////Missions that do not contain any probabilities or rewards
	////This avoids nested probabilistic and reward operators
	//Mission_no_prob_rew returns Missions:
	//    ShallMissions |
	//    ComplexMissions |
	//    //CompositePatterns
	//    Pause |
	//    Timeout |
	//    Repeat |
	//    End |
	//    Execute
	//;
	public Mission_no_prob_rewElements getMission_no_prob_rewAccess() {
		return pMission_no_prob_rew;
	}
	
	public ParserRule getMission_no_prob_rewRule() {
		return getMission_no_prob_rewAccess().getRule();
	}
	
	//MissionOperation returns MissionOperation:
	//    Negation | Composition;
	public MissionOperationElements getMissionOperationAccess() {
		return pMissionOperation;
	}
	
	public ParserRule getMissionOperationRule() {
		return getMissionOperationAccess().getRule();
	}
	
	//ShallMissions returns ShallMissions:
	//    {ShallMissions}
	//    robots=[Robots|EString] 'shall'
	//        movementPatterns=SpecificationPatterns//--add in the future ( "," movementPatterns+=SpecificationPatterns)*
	//    ;
	public ShallMissionsElements getShallMissionsAccess() {
		return pShallMissions;
	}
	
	public ParserRule getShallMissionsRule() {
		return getShallMissionsAccess().getRule();
	}
	
	//ComplexMissions returns ComplexMissions:
	//    {ComplexMissions}
	//    //'complex' 'mission'
	//    composition=MissionOperation//--should work without this ( "," composition+=MissionOperation)*
	//    ;
	public ComplexMissionsElements getComplexMissionsAccess() {
		return pComplexMissions;
	}
	
	public ParserRule getComplexMissionsRule() {
		return getComplexMissionsAccess().getRule();
	}
	
	//Negation returns Negation:
	//    {Negation}
	//    'not' '(' not=Missions ')';
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//Composition returns Composition:
	//    {Composition}
	//    '(' miss1=Missions ')' binaryType=('and'|'or') '(' miss2=Missions ')';
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//// ( binaryType=CompositionOperator missions+=Missions )* ;
	//    // cannot add more "binaryType" as it is only returned/written once (the last one to appear)
	///* Specification patterns */
	//SpecificationPatterns returns SpecificationPatterns:
	//    Visit1 | Patrol | AvoidanceVisit |React | Counteract | Wait;
	public SpecificationPatternsElements getSpecificationPatternsAccess() {
		return pSpecificationPatterns;
	}
	
	public ParserRule getSpecificationPatternsRule() {
		return getSpecificationPatternsAccess().getRule();
	}
	
	////Coverage and Patrol
	//Visit1 returns Visit1: //this was changed to add 'visit loc' (without any string in the middle)
	//    {Visit1}
	//    'visit' type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?  locations+=[Location|EString] ("," locations+=[Location|EString])* ;
	public Visit1Elements getVisit1Access() {
		return pVisit1;
	}
	
	public ParserRule getVisit1Rule() {
		return getVisit1Access().getRule();
	}
	
	//Patrol returns Patrol:
	//    {Patrol}
	//    'patrol' type=('in sequence' | 'in order' | 'in strict order' | 'fairly')?  locations+=[Location|EString] ("," locations+=[Location|EString])* ;
	public PatrolElements getPatrolAccess() {
		return pPatrol;
	}
	
	public ParserRule getPatrolRule() {
		return getPatrolAccess().getRule();
	}
	
	////Avoidance
	//AvoidanceVisit returns AvoidanceVisit:
	//    Visit2 | Avoid;
	public AvoidanceVisitElements getAvoidanceVisitAccess() {
		return pAvoidanceVisit;
	}
	
	public ParserRule getAvoidanceVisitRule() {
		return getAvoidanceVisitAccess().getRule();
	}
	
	//Visit2 returns Visit2:
	//    {Visit2}
	//    'visit' type =('more than' | 'less than' | 'exactly') number=EInt 'times' locations+=[Location|EString] ;
	public Visit2Elements getVisit2Access() {
		return pVisit2;
	}
	
	public ParserRule getVisit2Rule() {
		return getVisit2Access().getRule();
	}
	
	//Avoid returns Avoid:
	//    {Avoid}
	//    'avoid' locations+=[Location|EString] ("," locations+=[Location|EString])*  type=('until'|'after')? (condition=[Condition|EString])?
	//    ;
	public AvoidElements getAvoidAccess() {
		return pAvoid;
	}
	
	public ParserRule getAvoidRule() {
		return getAvoidAccess().getRule();
	}
	
	//React returns React:
	//    {React}
	//    'react'
	//    type = ('instantly'|'with a delay'| 'promptly')
	//    'to' condition=[Condition|EString] 'by'
	//    ('exec' action=[Action|EString] | pattern=SpecificationPatterns | 'reach' locations+=[Location|EString]);
	public ReactElements getReactAccess() {
		return pReact;
	}
	
	public ParserRule getReactRule() {
		return getReactAccess().getRule();
	}
	
	//Counteract returns Counteract:
	//    {Counteract}
	//    'counteract'
	//    type = ('instantly'|'with a delay') 'when' 'reach' locations=[Location|EString]
	//    'by' (condition=[Condition|EString])
	//    ;
	public CounteractElements getCounteractAccess() {
		return pCounteract;
	}
	
	public ParserRule getCounteractRule() {
		return getCounteractAccess().getRule();
	}
	
	//Wait returns Wait:
	//    {Wait}
	//    'wait in' locations+=[Location|EString]
	//    'until' condition=[Condition|EString];
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//Delayed returns Delayed:
	//    {Delayed}
	//    'with' 'a' 'delay' 'to' 'condition' (condition=[Condition|EString]) 'by'
	//    ('executing' (action=[Action|EString] | pattern=SpecificationPatterns) | 'reaching' locations+=[Location|EString]);
	public DelayedElements getDelayedAccess() {
		return pDelayed;
	}
	
	public ParserRule getDelayedRule() {
		return getDelayedAccess().getRule();
	}
	
	///* Elementary (quantitative) patterns */
	//ElementaryPatterns returns ElementaryPatterns:
	//    Maximize | AtMost | Within;
	public ElementaryPatternsElements getElementaryPatternsAccess() {
		return pElementaryPatterns;
	}
	
	public ParserRule getElementaryPatternsRule() {
		return getElementaryPatternsAccess().getRule();
	}
	
	//Maximize returns Maximize:
	//    {Maximize}
	//    reward = ('reward')?
	//    //Mission cannot be elementary patterns to avoid nested prob. or rewards.
	//    type=('maximize'|'minimize') measure=EString mission= Mission_no_prob_rew;
	public MaximizeElements getMaximizeAccess() {
		return pMaximize;
	}
	
	public ParserRule getMaximizeRule() {
		return getMaximizeAccess().getRule();
	}
	
	//AtMost returns AtMost:
	//    {AtMost}
	//    reward = ('reward')?
	//    measure=EString type=('at most'|'less than'|'at least'|'greater than'| 'exactly') value=EDouble mission=Mission_no_prob_rew;
	public AtMostElements getAtMostAccess() {
		return pAtMost;
	}
	
	public ParserRule getAtMostRule() {
		return getAtMostAccess().getRule();
	}
	
	//Within returns Within:
	//    {Within}
	//    reward = ('reward')?
	//    measure=EString type=('within'|'strictly within') value1=EDouble 'and' value2=EDouble mission=Mission_no_prob_rew;
	public WithinElements getWithinAccess() {
		return pWithin;
	}
	
	public ParserRule getWithinRule() {
		return getWithinAccess().getRule();
	}
	
	///* Composite patterns */
	//CompositePatterns returns CompositePatterns:
	//    Conservation | Preservation | Pause | Timeout| Repeat
	//    | End | Proportional | Execute | Accrue | ReliabilityConfidence | Equidistance
	//     | Trail  ;
	public CompositePatternsElements getCompositePatternsAccess() {
		return pCompositePatterns;
	}
	
	public ParserRule getCompositePatternsRule() {
		return getCompositePatternsAccess().getRule();
	}
	
	//Conservation returns Conservation:
	//    {Conservation}
	//    'conserve' measure=EString 'while' missions=Mission_no_prob_rew;
	public ConservationElements getConservationAccess() {
		return pConservation;
	}
	
	public ParserRule getConservationRule() {
		return getConservationAccess().getRule();
	}
	
	//Preservation returns Preservation:
	//    {Preservation}
	//    'preserve' measure=EString 'within' '[' value1=EDouble ',' value2=EDouble ']' 'while' missions=Mission_no_prob_rew;
	public PreservationElements getPreservationAccess() {
		return pPreservation;
	}
	
	public ParserRule getPreservationRule() {
		return getPreservationAccess().getRule();
	}
	
	//Pause returns Pause:
	//    {Pause}
	//    'pause' value=EInt missions=Missions;
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//Timeout returns Timeout:
	//    {Timeout}
	//    'timeout' value=EInt missions=Missions;
	public TimeoutElements getTimeoutAccess() {
		return pTimeout;
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}
	
	//Repeat returns Repeat:
	//    {Repeat}
	//    'repeat' missions=Missions 'every'  value=EInt;
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//End returns End:
	//    {End}
	//    'end' missions=Missions 'exactly_at' value=EInt;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	// //***delete all except missions and add t
	//    //NOTE: I use exactly at instead of exactly_at as the paper
	//    //***'abort' missions=Missions 'if' (condition=[Condition|EString]| locationevent+=LocationEvent); // added + in "locationevent+=LocationEvent" to delete error
	//Proportional returns Proportional:
	//    {Proportional}
	//    'time' 'of' mission1=Missions 'proportional to' mission2=Missions 'by' 'factor' value=EInt //---NOTE: MAKE ALL INT OR FLOAT***
	//    ;
	public ProportionalElements getProportionalAccess() {
		return pProportional;
	}
	
	public ParserRule getProportionalRule() {
		return getProportionalAccess().getRule();
	}
	
	//Execute returns Execute:
	//    {Execute}
	//    'execute' robots=[Robots|EString] 'actions' setOfActions+=[Action|EString] ( "," setOfActions+=[Action|EString])*;
	public ExecuteElements getExecuteAccess() {
		return pExecute;
	}
	
	public ParserRule getExecuteRule() {
		return getExecuteAccess().getRule();
	}
	
	//Accrue returns Accrue:
	//    {Accrue}
	//    robots=[Robots|EString] 'accrue' measure=EString 'while' missions=Missions;
	public AccrueElements getAccrueAccess() {
		return pAccrue;
	}
	
	public ParserRule getAccrueRule() {
		return getAccrueAccess().getRule();
	}
	
	//ReliabilityConfidence returns ReliabilityConfidence:
	//    {ReliabilityConfidence}
	//    'achieve' missions=Mission_no_prob_rew type1=('with confidence'|'with reliability') measure=EString type2=('greater than'|'less than') value=EDouble ;
	public ReliabilityConfidenceElements getReliabilityConfidenceAccess() {
		return pReliabilityConfidence;
	}
	
	public ParserRule getReliabilityConfidenceRule() {
		return getReliabilityConfidenceAccess().getRule();
	}
	
	//Equidistance returns Equidistance:
	//    {Equidistance}
	//    //'keep' 'distance' distance=EInt
	//    robots=[Robots|EString] missions=Missions 'equidistance' robots1=[Robots|EString]  robots2=[Robots|EString]
	//    ;
	public EquidistanceElements getEquidistanceAccess() {
		return pEquidistance;
	}
	
	public ParserRule getEquidistanceRule() {
		return getEquidistanceAccess().getRule();
	}
	
	//    //***add all robots
	//Trail returns Trail:
	//    {Trail}
	//    robots=[Robots|EString] 'trail' objetToFollow=EString  'with distance' value=EInt;
	public TrailElements getTrailAccess() {
		return pTrail;
	}
	
	public ParserRule getTrailRule() {
		return getTrailAccess().getRule();
	}
	
	///* Others */
	//EDouble returns ecore::EDouble:
	//    INT  '.' INT
	//;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
