/**
 */
package patterns.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import patterns.util.PatternsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PatternsItemProviderAdapterFactory extends PatternsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PatternsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Visit1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Visit1ItemProvider visit1ItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Visit1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisit1Adapter() {
		if (visit1ItemProvider == null) {
			visit1ItemProvider = new Visit1ItemProvider(this);
		}

		return visit1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.ProblemSpecifications} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProblemSpecificationsItemProvider problemSpecificationsItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.ProblemSpecifications}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProblemSpecificationsAdapter() {
		if (problemSpecificationsItemProvider == null) {
			problemSpecificationsItemProvider = new ProblemSpecificationsItemProvider(this);
		}

		return problemSpecificationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Location} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationItemProvider locationItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Location}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationAdapter() {
		if (locationItemProvider == null) {
			locationItemProvider = new LocationItemProvider(this);
		}

		return locationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Order} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderItemProvider orderItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Order}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderAdapter() {
		if (orderItemProvider == null) {
			orderItemProvider = new OrderItemProvider(this);
		}

		return orderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.StrictOrder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrictOrderItemProvider strictOrderItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.StrictOrder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrictOrderAdapter() {
		if (strictOrderItemProvider == null) {
			strictOrderItemProvider = new StrictOrderItemProvider(this);
		}

		return strictOrderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Patrol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatrolItemProvider patrolItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Patrol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatrolAdapter() {
		if (patrolItemProvider == null) {
			patrolItemProvider = new PatrolItemProvider(this);
		}

		return patrolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.LocationEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationEventItemProvider locationEventItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.LocationEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationEventAdapter() {
		if (locationEventItemProvider == null) {
			locationEventItemProvider = new LocationEventItemProvider(this);
		}

		return locationEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Robots} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RobotsItemProvider robotsItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Robots}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRobotsAdapter() {
		if (robotsItemProvider == null) {
			robotsItemProvider = new RobotsItemProvider(this);
		}

		return robotsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Fair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FairItemProvider fairItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Fair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFairAdapter() {
		if (fairItemProvider == null) {
			fairItemProvider = new FairItemProvider(this);
		}

		return fairItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Visit2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Visit2ItemProvider visit2ItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Visit2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisit2Adapter() {
		if (visit2ItemProvider == null) {
			visit2ItemProvider = new Visit2ItemProvider(this);
		}

		return visit2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Less} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessItemProvider lessItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Less}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessAdapter() {
		if (lessItemProvider == null) {
			lessItemProvider = new LessItemProvider(this);
		}

		return lessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Exactly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExactlyItemProvider exactlyItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Exactly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExactlyAdapter() {
		if (exactlyItemProvider == null) {
			exactlyItemProvider = new ExactlyItemProvider(this);
		}

		return exactlyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Simple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleItemProvider simpleItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Simple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleAdapter() {
		if (simpleItemProvider == null) {
			simpleItemProvider = new SimpleItemProvider(this);
		}

		return simpleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Avoid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvoidItemProvider avoidItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Avoid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvoidAdapter() {
		if (avoidItemProvider == null) {
			avoidItemProvider = new AvoidItemProvider(this);
		}

		return avoidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.After} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterItemProvider afterItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.After}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterAdapter() {
		if (afterItemProvider == null) {
			afterItemProvider = new AfterItemProvider(this);
		}

		return afterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Wait} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaitItemProvider waitItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Wait}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaitAdapter() {
		if (waitItemProvider == null) {
			waitItemProvider = new WaitItemProvider(this);
		}

		return waitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.React} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReactItemProvider reactItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.React}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReactAdapter() {
		if (reactItemProvider == null) {
			reactItemProvider = new ReactItemProvider(this);
		}

		return reactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Counteract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CounteractItemProvider counteractItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Counteract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCounteractAdapter() {
		if (counteractItemProvider == null) {
			counteractItemProvider = new CounteractItemProvider(this);
		}

		return counteractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Maximize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaximizeItemProvider maximizeItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Maximize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaximizeAdapter() {
		if (maximizeItemProvider == null) {
			maximizeItemProvider = new MaximizeItemProvider(this);
		}

		return maximizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.LessThan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessThanItemProvider lessThanItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.LessThan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessThanAdapter() {
		if (lessThanItemProvider == null) {
			lessThanItemProvider = new LessThanItemProvider(this);
		}

		return lessThanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Minimize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinimizeItemProvider minimizeItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Minimize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinimizeAdapter() {
		if (minimizeItemProvider == null) {
			minimizeItemProvider = new MinimizeItemProvider(this);
		}

		return minimizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.AtMost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtMostItemProvider atMostItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.AtMost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtMostAdapter() {
		if (atMostItemProvider == null) {
			atMostItemProvider = new AtMostItemProvider(this);
		}

		return atMostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.AtLeast} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtLeastItemProvider atLeastItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.AtLeast}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtLeastAdapter() {
		if (atLeastItemProvider == null) {
			atLeastItemProvider = new AtLeastItemProvider(this);
		}

		return atLeastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.GreaterThan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterThanItemProvider greaterThanItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.GreaterThan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterThanAdapter() {
		if (greaterThanItemProvider == null) {
			greaterThanItemProvider = new GreaterThanItemProvider(this);
		}

		return greaterThanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Within} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WithinItemProvider withinItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Within}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWithinAdapter() {
		if (withinItemProvider == null) {
			withinItemProvider = new WithinItemProvider(this);
		}

		return withinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.StrictlyWithin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrictlyWithinItemProvider strictlyWithinItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.StrictlyWithin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrictlyWithinAdapter() {
		if (strictlyWithinItemProvider == null) {
			strictlyWithinItemProvider = new StrictlyWithinItemProvider(this);
		}

		return strictlyWithinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.ShallMissions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShallMissionsItemProvider shallMissionsItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.ShallMissions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShallMissionsAdapter() {
		if (shallMissionsItemProvider == null) {
			shallMissionsItemProvider = new ShallMissionsItemProvider(this);
		}

		return shallMissionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.ActionEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionEndItemProvider actionEndItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.ActionEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionEndAdapter() {
		if (actionEndItemProvider == null) {
			actionEndItemProvider = new ActionEndItemProvider(this);
		}

		return actionEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Delayed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelayedItemProvider delayedItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Delayed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelayedAdapter() {
		if (delayedItemProvider == null) {
			delayedItemProvider = new DelayedItemProvider(this);
		}

		return delayedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.ComplexMissions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexMissionsItemProvider complexMissionsItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.ComplexMissions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexMissionsAdapter() {
		if (complexMissionsItemProvider == null) {
			complexMissionsItemProvider = new ComplexMissionsItemProvider(this);
		}

		return complexMissionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Negation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegationItemProvider negationItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Negation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegationAdapter() {
		if (negationItemProvider == null) {
			negationItemProvider = new NegationItemProvider(this);
		}

		return negationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Composition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionItemProvider compositionItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Composition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionAdapter() {
		if (compositionItemProvider == null) {
			compositionItemProvider = new CompositionItemProvider(this);
		}

		return compositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Conservation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConservationItemProvider conservationItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Conservation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConservationAdapter() {
		if (conservationItemProvider == null) {
			conservationItemProvider = new ConservationItemProvider(this);
		}

		return conservationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Preservation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreservationItemProvider preservationItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Preservation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreservationAdapter() {
		if (preservationItemProvider == null) {
			preservationItemProvider = new PreservationItemProvider(this);
		}

		return preservationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.RepeatEvery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatEveryItemProvider repeatEveryItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.RepeatEvery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatEveryAdapter() {
		if (repeatEveryItemProvider == null) {
			repeatEveryItemProvider = new RepeatEveryItemProvider(this);
		}

		return repeatEveryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Maintain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaintainItemProvider maintainItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Maintain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaintainAdapter() {
		if (maintainItemProvider == null) {
			maintainItemProvider = new MaintainItemProvider(this);
		}

		return maintainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.End} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndItemProvider endItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.End}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndAdapter() {
		if (endItemProvider == null) {
			endItemProvider = new EndItemProvider(this);
		}

		return endItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.ResumeIf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResumeIfItemProvider resumeIfItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.ResumeIf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResumeIfAdapter() {
		if (resumeIfItemProvider == null) {
			resumeIfItemProvider = new ResumeIfItemProvider(this);
		}

		return resumeIfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Accrue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccrueItemProvider accrueItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Accrue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccrueAdapter() {
		if (accrueItemProvider == null) {
			accrueItemProvider = new AccrueItemProvider(this);
		}

		return accrueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Secure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecureItemProvider secureItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Secure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecureAdapter() {
		if (secureItemProvider == null) {
			secureItemProvider = new SecureItemProvider(this);
		}

		return secureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Equidistance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquidistanceItemProvider equidistanceItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Equidistance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEquidistanceAdapter() {
		if (equidistanceItemProvider == null) {
			equidistanceItemProvider = new EquidistanceItemProvider(this);
		}

		return equidistanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Trail} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrailItemProvider trailItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Trail}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrailAdapter() {
		if (trailItemProvider == null) {
			trailItemProvider = new TrailItemProvider(this);
		}

		return trailItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Pause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PauseItemProvider pauseItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Pause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPauseAdapter() {
		if (pauseItemProvider == null) {
			pauseItemProvider = new PauseItemProvider(this);
		}

		return pauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Timeout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeoutItemProvider timeoutItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Timeout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeoutAdapter() {
		if (timeoutItemProvider == null) {
			timeoutItemProvider = new TimeoutItemProvider(this);
		}

		return timeoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.ReliabilityConfidence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReliabilityConfidenceItemProvider reliabilityConfidenceItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.ReliabilityConfidence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReliabilityConfidenceAdapter() {
		if (reliabilityConfidenceItemProvider == null) {
			reliabilityConfidenceItemProvider = new ReliabilityConfidenceItemProvider(this);
		}

		return reliabilityConfidenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Relaxed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelaxedItemProvider relaxedItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Relaxed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelaxedAdapter() {
		if (relaxedItemProvider == null) {
			relaxedItemProvider = new RelaxedItemProvider(this);
		}

		return relaxedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.AlmostAt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlmostAtItemProvider almostAtItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.AlmostAt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlmostAtAdapter() {
		if (almostAtItemProvider == null) {
			almostAtItemProvider = new AlmostAtItemProvider(this);
		}

		return almostAtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.ExactlyAt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExactlyAtItemProvider exactlyAtItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.ExactlyAt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExactlyAtAdapter() {
		if (exactlyAtItemProvider == null) {
			exactlyAtItemProvider = new ExactlyAtItemProvider(this);
		}

		return exactlyAtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.DeadlineAt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeadlineAtItemProvider deadlineAtItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.DeadlineAt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeadlineAtAdapter() {
		if (deadlineAtItemProvider == null) {
			deadlineAtItemProvider = new DeadlineAtItemProvider(this);
		}

		return deadlineAtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Proportional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProportionalItemProvider proportionalItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Proportional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProportionalAdapter() {
		if (proportionalItemProvider == null) {
			proportionalItemProvider = new ProportionalItemProvider(this);
		}

		return proportionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Execute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecuteItemProvider executeItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Execute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecuteAdapter() {
		if (executeItemProvider == null) {
			executeItemProvider = new ExecuteItemProvider(this);
		}

		return executeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Sequencing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequencingItemProvider sequencingItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Sequencing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequencingAdapter() {
		if (sequencingItemProvider == null) {
			sequencingItemProvider = new SequencingItemProvider(this);
		}

		return sequencingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Deviation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviationItemProvider deviationItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Deviation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviationAdapter() {
		if (deviationItemProvider == null) {
			deviationItemProvider = new DeviationItemProvider(this);
		}

		return deviationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.Repeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatItemProvider repeatItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.Repeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatAdapter() {
		if (repeatItemProvider == null) {
			repeatItemProvider = new RepeatItemProvider(this);
		}

		return repeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link patterns.TopMissions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopMissionsItemProvider topMissionsItemProvider;

	/**
	 * This creates an adapter for a {@link patterns.TopMissions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopMissionsAdapter() {
		if (topMissionsItemProvider == null) {
			topMissionsItemProvider = new TopMissionsItemProvider(this);
		}

		return topMissionsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (visit1ItemProvider != null) visit1ItemProvider.dispose();
		if (problemSpecificationsItemProvider != null) problemSpecificationsItemProvider.dispose();
		if (locationItemProvider != null) locationItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (sequenceItemProvider != null) sequenceItemProvider.dispose();
		if (orderItemProvider != null) orderItemProvider.dispose();
		if (strictOrderItemProvider != null) strictOrderItemProvider.dispose();
		if (patrolItemProvider != null) patrolItemProvider.dispose();
		if (locationEventItemProvider != null) locationEventItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (robotsItemProvider != null) robotsItemProvider.dispose();
		if (fairItemProvider != null) fairItemProvider.dispose();
		if (visit2ItemProvider != null) visit2ItemProvider.dispose();
		if (lessItemProvider != null) lessItemProvider.dispose();
		if (exactlyItemProvider != null) exactlyItemProvider.dispose();
		if (simpleItemProvider != null) simpleItemProvider.dispose();
		if (avoidItemProvider != null) avoidItemProvider.dispose();
		if (afterItemProvider != null) afterItemProvider.dispose();
		if (waitItemProvider != null) waitItemProvider.dispose();
		if (reactItemProvider != null) reactItemProvider.dispose();
		if (counteractItemProvider != null) counteractItemProvider.dispose();
		if (maximizeItemProvider != null) maximizeItemProvider.dispose();
		if (lessThanItemProvider != null) lessThanItemProvider.dispose();
		if (minimizeItemProvider != null) minimizeItemProvider.dispose();
		if (atMostItemProvider != null) atMostItemProvider.dispose();
		if (atLeastItemProvider != null) atLeastItemProvider.dispose();
		if (greaterThanItemProvider != null) greaterThanItemProvider.dispose();
		if (withinItemProvider != null) withinItemProvider.dispose();
		if (strictlyWithinItemProvider != null) strictlyWithinItemProvider.dispose();
		if (shallMissionsItemProvider != null) shallMissionsItemProvider.dispose();
		if (actionEndItemProvider != null) actionEndItemProvider.dispose();
		if (delayedItemProvider != null) delayedItemProvider.dispose();
		if (complexMissionsItemProvider != null) complexMissionsItemProvider.dispose();
		if (negationItemProvider != null) negationItemProvider.dispose();
		if (compositionItemProvider != null) compositionItemProvider.dispose();
		if (conservationItemProvider != null) conservationItemProvider.dispose();
		if (preservationItemProvider != null) preservationItemProvider.dispose();
		if (repeatEveryItemProvider != null) repeatEveryItemProvider.dispose();
		if (maintainItemProvider != null) maintainItemProvider.dispose();
		if (endItemProvider != null) endItemProvider.dispose();
		if (resumeIfItemProvider != null) resumeIfItemProvider.dispose();
		if (accrueItemProvider != null) accrueItemProvider.dispose();
		if (secureItemProvider != null) secureItemProvider.dispose();
		if (equidistanceItemProvider != null) equidistanceItemProvider.dispose();
		if (trailItemProvider != null) trailItemProvider.dispose();
		if (pauseItemProvider != null) pauseItemProvider.dispose();
		if (timeoutItemProvider != null) timeoutItemProvider.dispose();
		if (reliabilityConfidenceItemProvider != null) reliabilityConfidenceItemProvider.dispose();
		if (relaxedItemProvider != null) relaxedItemProvider.dispose();
		if (almostAtItemProvider != null) almostAtItemProvider.dispose();
		if (exactlyAtItemProvider != null) exactlyAtItemProvider.dispose();
		if (deadlineAtItemProvider != null) deadlineAtItemProvider.dispose();
		if (proportionalItemProvider != null) proportionalItemProvider.dispose();
		if (executeItemProvider != null) executeItemProvider.dispose();
		if (sequencingItemProvider != null) sequencingItemProvider.dispose();
		if (deviationItemProvider != null) deviationItemProvider.dispose();
		if (repeatItemProvider != null) repeatItemProvider.dispose();
		if (topMissionsItemProvider != null) topMissionsItemProvider.dispose();
	}

}
